$pipe in_data : $uint<64> $depth 2
$pipe out_data : $uint<64> $depth 2
$pipe out_wrap_cmd : $uint<64> $depth 2
$pipe out_wrap_data : $uint<64> $depth 2

$module [In_wrap_daemon] $in() $out() $is
{	
	$constant ZERO_COUNT : $uint<15> := 0
	//$constant MAX_COUNT : $uint<15> := 126 //(127-1) i.e.127
	
	$branchblock[MAIN] {
		
		$volatile head0 := in_data
		head1 := in_data
		
		out_wrap_cmd := head1
		cmd_in := head1
		$volatile $split (head1 1 3 1 44 15) (ED mode got_new_key xxx count)
		
		
		$guard (got_new_key) cmd_in := in_data
		$guard (got_new_key) cmd_in := in_data
		
		$volatile max_count_var := ($mux got_new_key ($bitcast ($uint<15>) 125) ($bitcast ($uint<15>) 126))
		$volatile count_num := (count - 1)
		count_blocks := ($excmux
					(max_count_var < count)
						max_count_var

					(max_count_var >= count)
						count_num
				)
	
		$merge $entry loop1
			$phi count_var 	:= ZERO_COUNT $on $entry	n_count_var $on loop1
		$endmerge
		
				$if (ED == 0) $then
					e_in_data := in_data
					e_in_data := in_data
	
				$else
					d_in_data := in_data
					d_in_data := in_data
				$endif
	
			
		$volatile n_count_var := (count_var + 1)
		
		$if (count_var < count_blocks) $then $place [loop1] 
		
		$else 
			$if (count_var < max_count_var) $then
			
				$merge $entry loop2
					$phi count_var2 := n_count_var $on $entry	n_count_var2 $on loop2
				$endmerge
		
			
						out_wrap_data := in_data
						out_wrap_data := in_data

				$volatile n_count_var2 := (count_var2 + 1)
				$if (count_var2 < max_count_var) $then $place [loop2] $endif
		
			$endif
		$endif
		
	}
}

$module [Out_wrap_daemon] $in() $out() $is
{	
	$constant ZERO_COUNT : $uint<15> := 0
	$constant ZERO : $uint<64> := 0
	//$constant MAX_COUNT : $uint<15>:= 127
	$branchblock[MAIN] {
		
		head_out := out_wrap_cmd
		out_data := head_out
		
		$volatile $split (head_out 1 3 1 44 15) (ED mode got_new_key xxx count)
		
		out_data := status_out
		
		
		$volatile max_count_var := ($mux got_new_key ($bitcast ($uint<15>) 125) ($bitcast ($uint<15>) 126))
		count_blocks := ($excmux
					(max_count_var < count)
						(max_count_var - 1)

					(max_count_var >= count)
						(count - 1)
				)
	
		$merge $entry loop1
			$phi count_var 	:= ZERO_COUNT $on $entry	n_count_var $on loop1
		$endmerge
		
				$if (ED == 0) $then
					out_data := e_out_data
					out_data := e_out_data
	
				$else
					out_data := d_out_data
					out_data := d_out_data
				$endif
	
			
		$volatile n_count_var := (count_var + 1)
		$if (count_var < count_blocks) $then $place [loop1] 
		
		$else
		
			$if (count_var < max_count_var) $then
				$merge $entry loop2
					$phi count_var2 := n_count_var $on $entry	n_count_var2 $on loop2
				$endmerge
		
			
						out_data := out_wrap_data
						out_data := out_wrap_data

				$volatile n_count_var2 := (count_var2 + 1)
				$if (count_var2 < max_count_var) $then $place [loop2] $endif
		
			$endif
		$endif
		
		$guard (got_new_key) out_data := ZERO
		$guard (got_new_key) out_data := ZERO
		
	}
}
