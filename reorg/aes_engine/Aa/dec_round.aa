// single decryption round.
// self-explanatory.
$operator $module [dec_round] $in(round_in : $uint<128> key_in : $uint<128> l_round : $uint<1>) $out (round_out : $uint<128>) $is
{
	//$constant mod_const : $uint<8> := _h1b //_b00011011
	$constant sel : $uint<8> := _b01111111
	

	$volatile $split (round_in 32 32 32 32)
			(ISa ISb ISc ISd)
			
		
	$volatile $split (ISa 8 8 8 8)
			(IS00 IS01 IS02 IS03)
	$volatile $split (ISb 8 8 8 8)
			(IS04 IS05 IS06 IS07)
	$volatile $split (ISc 8 8 8 8)
			(IS08 IS09 IS10 IS11)
	$volatile $split (ISd 8 8 8 8)
			(IS12 IS13 IS14 IS15)
			
	$volatile $call MUL2 (IS00) (IS00x2) 
	$volatile $call MUL2 (IS01) (IS01x2) 
	$volatile $call MUL2 (IS02) (IS02x2) 
	$volatile $call MUL2 (IS03) (IS03x2) 
	$volatile $call MUL2 (IS04) (IS04x2) 
	$volatile $call MUL2 (IS05) (IS05x2) 
	$volatile $call MUL2 (IS06) (IS06x2) 
	$volatile $call MUL2 (IS07) (IS07x2) 
	$volatile $call MUL2 (IS08) (IS08x2) 
	$volatile $call MUL2 (IS09) (IS09x2) 
	$volatile $call MUL2 (IS10) (IS10x2) 
	$volatile $call MUL2 (IS11) (IS11x2) 
	$volatile $call MUL2 (IS12) (IS12x2) 
	$volatile $call MUL2 (IS13) (IS13x2) 
	$volatile $call MUL2 (IS14) (IS14x2) 
	$volatile $call MUL2 (IS15) (IS15x2)		
	
	$volatile Wc0 := ((IS00 ^ IS01) ^ (IS02 ^ IS03))
	$volatile Wc1 := ((IS04 ^ IS05) ^ (IS06 ^ IS07))
	$volatile Wc2 := ((IS08 ^ IS09) ^ (IS10 ^ IS11))
	$volatile Wc3 := ((IS12 ^ IS13) ^ (IS14 ^ IS15))
	
	$volatile Y00 := (IS00x2 ^ IS02x2)
	$volatile Y01 := (IS04x2 ^ IS06x2)
	$volatile Y02 := (IS08x2 ^ IS10x2)
	$volatile Y03 := (IS12x2 ^ IS14x2)
	
	$volatile Y10 := (IS01x2 ^ IS03x2)
	$volatile Y11 := (IS05x2 ^ IS07x2)
	$volatile Y12 := (IS09x2 ^ IS11x2)
	$volatile Y13 := (IS13x2 ^ IS15x2)
	
	$volatile $call MUL2 (Y00) (Y00x2) 
	$volatile $call MUL2 (Y01) (Y01x2) 
	$volatile $call MUL2 (Y02) (Y02x2) 
	$volatile $call MUL2 (Y03) (Y03x2) 
	
	$volatile $call MUL2 (Y10) (Y10x2) 
	$volatile $call MUL2 (Y11) (Y11x2) 
	$volatile $call MUL2 (Y12) (Y12x2) 
	$volatile $call MUL2 (Y13) (Y13x2)
	
	$volatile Z0 := (Y00x2 ^ Y10x2)
	$volatile Z1 := (Y01x2 ^ Y11x2)
	$volatile Z2 := (Y02x2 ^ Y12x2)
	$volatile Z3 := (Y03x2 ^ Y13x2)
	
	$volatile $call MUL2 (Z0) (Z0x2) 
	$volatile $call MUL2 (Z1) (Z1x2) 
	$volatile $call MUL2 (Z2) (Z2x2) 
	$volatile $call MUL2 (Z3) (Z3x2)
	
	
	$volatile A0 := (Z0x2 ^ Wc0)
	$volatile A1 := (Z1x2 ^ Wc1)
	$volatile A2 := (Z2x2 ^ Wc2)
	$volatile A3 := (Z3x2 ^ Wc3)
	
	$volatile B00 := (A0 ^ Y00x2)
	$volatile B01 := (A1 ^ Y01x2)
	$volatile B02 := (A2 ^ Y02x2)
	$volatile B03 := (A3 ^ Y03x2)
	
	$volatile B10 := (A0 ^ Y10x2)
	$volatile B11 := (A1 ^ Y11x2)
	$volatile B12 := (A2 ^ Y12x2)
	$volatile B13 := (A3 ^ Y13x2)
	
	///////////////////////////////////
	//// Inverse Mix Column
	//////////////////////////////////
	
	$volatile IMX00 := ((B00 ^ IS00) ^ (IS00x2 ^ IS01x2))
	$volatile IMX01 := ((B10 ^ IS01) ^ (IS01x2 ^ IS02x2))
	$volatile IMX02 := ((B00 ^ IS02) ^ (IS02x2 ^ IS03x2))
	$volatile IMX03 := ((B10 ^ IS03) ^ (IS03x2 ^ IS00x2))
	
	$volatile IMX04 := ((B01 ^ IS04) ^ (IS04x2 ^ IS05x2))
	$volatile IMX05 := ((B11 ^ IS05) ^ (IS05x2 ^ IS06x2))
	$volatile IMX06 := ((B01 ^ IS06) ^ (IS06x2 ^ IS07x2))
	$volatile IMX07 := ((B11 ^ IS07) ^ (IS07x2 ^ IS04x2))
	
	$volatile IMX08 := ((B02 ^ IS08) ^ (IS08x2 ^ IS09x2))
	$volatile IMX09 := ((B12 ^ IS09) ^ (IS09x2 ^ IS10x2))
	$volatile IMX10 := ((B02 ^ IS10) ^ (IS10x2 ^ IS11x2))
	$volatile IMX11 := ((B12 ^ IS11) ^ (IS11x2 ^ IS08x2))
	
	$volatile IMX12 := ((B03 ^ IS12) ^ (IS12x2 ^ IS13x2))
	$volatile IMX13 := ((B13 ^ IS13) ^ (IS13x2 ^ IS14x2))
	$volatile IMX14 := ((B03 ^ IS14) ^ (IS14x2 ^ IS15x2))
	$volatile IMX15 := ((B13 ^ IS15) ^ (IS15x2 ^ IS12x2))
	
	////////////////////////////////////////////
	////InvMix-Columns not performed in last round
	///////////////////////////////////////////
		
	$volatile ISbox_in00 := ($mux l_round IS00 IMX00)
	$volatile ISbox_in01 := ($mux l_round IS01 IMX01)
	$volatile ISbox_in02 := ($mux l_round IS02 IMX02)
	$volatile ISbox_in03 := ($mux l_round IS03 IMX03)
	$volatile ISbox_in04 := ($mux l_round IS04 IMX04)
	$volatile ISbox_in05 := ($mux l_round IS05 IMX05)
	$volatile ISbox_in06 := ($mux l_round IS06 IMX06)
	$volatile ISbox_in07 := ($mux l_round IS07 IMX07)
	$volatile ISbox_in08 := ($mux l_round IS08 IMX08)
	$volatile ISbox_in09 := ($mux l_round IS09 IMX09)
	$volatile ISbox_in10 := ($mux l_round IS10 IMX10)
	$volatile ISbox_in11 := ($mux l_round IS11 IMX11)
	$volatile ISbox_in12 := ($mux l_round IS12 IMX12)
	$volatile ISbox_in13 := ($mux l_round IS13 IMX13)
	$volatile ISbox_in14 := ($mux l_round IS14 IMX14)
	$volatile ISbox_in15 := ($mux l_round IS15 IMX15)
	
	////////////////////////////////////////////
	//// Inverse Sub-Byte + Inverse Shift Rows
	///////////////////////////////////////////
	
	
	$volatile $call Inv_Sbox_1 (ISbox_in00) (Sout00) 
	$volatile $call Inv_Sbox_2 (ISbox_in01) (Sout05) 
	$volatile $call Inv_Sbox_3 (ISbox_in02) (Sout10) 
	$volatile $call Inv_Sbox_4 (ISbox_in03) (Sout15) 
	$volatile $call Inv_Sbox_1 (ISbox_in04) (Sout04) 
	$volatile $call Inv_Sbox_2 (ISbox_in05) (Sout09) 
	$volatile $call Inv_Sbox_3 (ISbox_in06) (Sout14) 
	$volatile $call Inv_Sbox_4 (ISbox_in07) (Sout03) 
	$volatile $call Inv_Sbox_1 (ISbox_in08) (Sout08) 
	$volatile $call Inv_Sbox_2 (ISbox_in09) (Sout13) 
	$volatile $call Inv_Sbox_3 (ISbox_in10) (Sout02) 
	$volatile $call Inv_Sbox_4 (ISbox_in11) (Sout07) 
	$volatile $call Inv_Sbox_1 (ISbox_in12) (Sout12) 
	$volatile $call Inv_Sbox_2 (ISbox_in13) (Sout01) 
	$volatile $call Inv_Sbox_3 (ISbox_in14) (Sout06) 
	$volatile $call Inv_Sbox_4 (ISbox_in15) (Sout11)

	
	$volatile ISX0 := ($concat Sout00 Sout01 Sout02 Sout03)
	$volatile ISX1 := ($concat Sout04 Sout05 Sout06 Sout07)  //$buffering 2
	$volatile ISX2 := ($concat Sout08 Sout09 Sout10 Sout11)  //$buffering 3
	$volatile ISX3 := ($concat Sout12 Sout13 Sout14 Sout15) // $buffering 4
	
	$volatile OUT := ($concat ISX0 ISX1 ISX2 ISX3)
	
	//Add round key
		round_out := (OUT ^ key_in)
		
}

$volatile $module[MUL2] $in(mul_in : $uint<8>) $out(mul_out : $uint<8>) $is
{
	$constant mod_const : $uint<8> := _h1b //_b00011011
	
	$volatile inx2 := (mul_in << 1)
	mul_out := ($mux (mul_in [] 7) (inx2 ^ mod_const) inx2)
}
