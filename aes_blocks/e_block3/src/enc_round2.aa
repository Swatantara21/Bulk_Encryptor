$module [enc_round] $in(round_in : $uint<128> key_in : $uint<128>) $out (round_out : $uint<128>) $is
{
	$constant mod_const : $uint<8> := _h1b //_b00011011
	$constant sel : $uint<8> := _b01111111
	
	
	$branchblock[MAIN]{	
		$volatile $split (round_in 32 32 32 32)
				(Sa Sb Sc Sd)
			
		
		$volatile $split (Sa 8 8 8 8)
				(S00sr S01sr S02sr S03sr)
		$volatile $split (Sb 8 8 8 8)
				(S04sr S05sr S06sr S07sr)
		$volatile $split (Sc 8 8 8 8)
				(S08sr S09sr S10sr S11sr)
		$volatile $split (Sd 8 8 8 8)
				(S12sr S13sr S14sr S15sr)
			
			
	
		$merge $entry loop1
				$phi round_sbox := ($bitcast ($uint<4>) 0) $on $entry
						n_round $on loop1
			$endmerge
		
			$volatile s1_in := ($excmux (round_sbox == 0) S00sr 
							(round_sbox == 1) S04sr
							(round_sbox == 2) S08sr
							(round_sbox == 3) S12sr )
		
			$volatile s2_in := ($excmux (round_sbox == 0) S05sr 
							(round_sbox == 1) S09sr
							(round_sbox == 2) S13sr
							(round_sbox == 3) S01sr )
		
			$volatile s3_in := ($excmux (round_sbox == 0) S10sr 
							(round_sbox == 1) S14sr
							(round_sbox == 2) S02sr
							(round_sbox == 3) S06sr )
		
			$volatile s4_in := ($excmux (round_sbox == 0) S15sr 
							(round_sbox == 1) S03sr
							(round_sbox == 2) S07sr
							(round_sbox == 3) S11sr )
			// shift rows + subbyte
			$call sbox_1 (s1_in) (s1_out)
			$call sbox_2 (s2_in) (s2_out)
			$call sbox_3 (s3_in) (s3_out)
			$call sbox_4 (s4_in) (s4_out)
		
			$volatile r0 := ($excmux (round_sbox == 0)  ($bitcast ($uint<1>) 1) 
							(round_sbox == 1) ($bitcast ($uint<1>) 0)
							(round_sbox == 2) ($bitcast ($uint<1>) 0)
							(round_sbox == 3) ($bitcast ($uint<1>) 0) )
		
			$volatile r1 := ($excmux (round_sbox == 0) ($bitcast ($uint<1>) 0) 
							(round_sbox == 1) ($bitcast ($uint<1>) 1)
							(round_sbox == 2) ($bitcast ($uint<1>) 0) 
							(round_sbox == 3) ($bitcast ($uint<1>) 0)  )
		
			$volatile r2 := ($excmux (round_sbox == 0) ($bitcast ($uint<1>) 0)  
							(round_sbox == 1) ($bitcast ($uint<1>) 0) 
							(round_sbox == 2) ($bitcast ($uint<1>) 1)
							(round_sbox == 3) ($bitcast ($uint<1>) 0)  )
		
			$volatile r3 := ($excmux (round_sbox == 0) ($bitcast ($uint<1>) 0)  
							(round_sbox == 1) ($bitcast ($uint<1>) 0) 
							(round_sbox == 2) ($bitcast ($uint<1>) 0) 
							(round_sbox == 3) ($bitcast ($uint<1>) 1) )
		
		
			$guard (r0) S00 := s1_out
			$guard (r0) S01 := s2_out
			$guard (r0) S02 := s3_out
			$guard (r0) S03 := s4_out
			$guard (r1) S04 := s1_out
			$guard (r1) S05 := s2_out
			$guard (r1) S06 := s3_out
			$guard (r1) S07 := s4_out
			$guard (r2) S08 := s1_out
			$guard (r2) S09 := s2_out
			$guard (r2) S10 := s3_out
			$guard (r2) S11 := s4_out
			$guard (r3) S12 := s1_out
			$guard (r3) S13 := s2_out
			$guard (r3) S14 := s3_out
			$guard (r3) S15 := s4_out
		
			$volatile n_round := (round_sbox + 1)
			$if (round_sbox < 3) $then
			 $place [loop1]
			$endif
	
			//mul by 2
			$volatile S00x2 := (S00 << 1)
			$volatile S01x2 := (S01 << 1)
			$volatile S02x2 := (S02 << 1)
			$volatile S03x2 := (S03 << 1)
			$volatile S04x2 := (S04 << 1)
			$volatile S05x2 := (S05 << 1)
			$volatile S06x2 := (S06 << 1)
			$volatile S07x2 := (S07 << 1)
			$volatile S08x2 := (S08 << 1)
			$volatile S09x2 := (S09 << 1)
			$volatile S10x2 := (S10 << 1)
			$volatile S11x2 := (S11 << 1)
			$volatile S12x2 := (S12 << 1)
			$volatile S13x2 := (S13 << 1)
			$volatile S14x2 := (S14 << 1)
			$volatile S15x2 := (S15 << 1)
	
		
		
			//
			// mul by 2 in GF
			$volatile S00x2g := ($mux (S00 [] 7) (S00x2 ^ mod_const) S00x2)
			$volatile S01x2g := ($mux (S01 [] 7) (S01x2 ^ mod_const) S01x2)
			$volatile S02x2g := ($mux (S02 [] 7) (S02x2 ^ mod_const) S02x2)
			$volatile S03x2g := ($mux (S03 [] 7) (S03x2 ^ mod_const) S03x2)
			$volatile S04x2g := ($mux (S04 [] 7) (S04x2 ^ mod_const) S04x2)
			$volatile S05x2g := ($mux (S05 [] 7) (S05x2 ^ mod_const) S05x2)
			$volatile S06x2g := ($mux (S06 [] 7) (S06x2 ^ mod_const) S06x2)
			$volatile S07x2g := ($mux (S07 [] 7) (S07x2 ^ mod_const) S07x2)
			$volatile S08x2g := ($mux (S08 [] 7) (S08x2 ^ mod_const) S08x2)
			$volatile S09x2g := ($mux (S09 [] 7) (S09x2 ^ mod_const) S09x2)
			$volatile S10x2g := ($mux (S10 [] 7) (S10x2 ^ mod_const) S10x2)
			$volatile S11x2g := ($mux (S11 [] 7) (S11x2 ^ mod_const) S11x2)
			$volatile S12x2g := ($mux (S12 [] 7) (S12x2 ^ mod_const) S12x2)
			$volatile S13x2g := ($mux (S13 [] 7) (S13x2 ^ mod_const) S13x2)
			$volatile S14x2g := ($mux (S14 [] 7) (S14x2 ^ mod_const) S14x2)
			$volatile S15x2g := ($mux (S15 [] 7) (S15x2 ^ mod_const) S15x2)
		
		
			$volatile Wc0 := ((S00 ^ S01) ^ (S02 ^ S03))
			$volatile Wc1 := ((S04 ^ S05) ^ (S06 ^ S07))
			$volatile Wc2 := ((S08 ^ S09) ^ (S10 ^ S11))
			$volatile Wc3 := ((S12 ^ S13) ^ (S14 ^ S15))
		
				
			//Mixcolumn
			//colunm0
			$volatile MX00 := ((S00x2g ^ S01x2g) ^ (Wc0 ^ S00))
			$volatile MX01 := ((S01x2g ^ S02x2g) ^ (Wc0 ^ S01))
			$volatile MX02 := ((S02x2g ^ S03x2g) ^ (Wc0 ^ S02))
			$volatile MX03 := ((S03x2g ^ S00x2g) ^ (Wc0 ^ S03))
		
			//colunm1
			$volatile MX04 := ((S04x2g ^ S05x2g) ^ (Wc1 ^ S04))
			$volatile MX05 := ((S05x2g ^ S06x2g) ^ (Wc1 ^ S05))
			$volatile MX06 := ((S06x2g ^ S07x2g) ^ (Wc1 ^ S06))
			$volatile MX07 := ((S07x2g ^ S04x2g) ^ (Wc1 ^ S07))
		
			//colunm2
			$volatile MX08 := ((S08x2g ^ S09x2g) ^ (Wc2 ^ S08))
			$volatile MX09 := ((S09x2g ^ S10x2g) ^ (Wc2 ^ S09))
			$volatile MX10 := ((S10x2g ^ S11x2g) ^ (Wc2 ^ S10))
			$volatile MX11 := ((S11x2g ^ S08x2g) ^ (Wc2 ^ S11))
		
			//colunm3
			$volatile MX12 := ((S12x2g ^ S13x2g) ^ (Wc3 ^ S12))
			$volatile MX13 := ((S13x2g ^ S14x2g) ^ (Wc3 ^ S13))
			$volatile MX14 := ((S14x2g ^ S15x2g) ^ (Wc3 ^ S14))
			$volatile MX15 := ((S15x2g ^ S12x2g) ^ (Wc3 ^ S15))
		
	
	
		
		$volatile Y0 := ($concat MX00 MX01 MX02 MX03)
		$volatile Y1 := ($concat MX04 MX05 MX06 MX07)  //$buffering 2
		$volatile Y2 := ($concat MX08 MX09 MX10 MX11)  //$buffering 3
		$volatile Y3 := ($concat MX12 MX13 MX14 MX15) // $buffering 4
	
		$volatile Yout := ($concat Y0 Y1 Y2 Y3)
	
		//Add round key
			round_out := (Yout ^ key_in)
		
	}
		
}
