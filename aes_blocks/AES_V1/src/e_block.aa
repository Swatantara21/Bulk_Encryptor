$module [e_block_demon] $in() $out () $is
{	
	
	//$pipe key_store: $uint<128> $depth 10
	$constant RConstant_1 : $uint<8> := _h01
	
	
	$branchblock[E_MAIN]  {
	
		$merge $entry NotGotKeyCmd $endmerge
		
	   	e_ol_key_in := e_key
	   	$volatile $split (e_ol_key_in 1 128) (e_ol_key_cmd e_ol_key)
	   	$if(e_ol_key_cmd == 0) $then $place [NotGotKeyCmd] $endif
	   
	   	
	   	
	   	$merge $entry GotKeyCmd 
	   	   //$phi key_cmd := e_ol_key_cmd $on $entry e_lkey_cmd $on GotKeyCmd
	   	   $phi K0 := e_ol_key $on $entry e_lkey $on GotKeyCmd
	   	$endmerge
	   	
	   	$call key_expand_single(K0 RConstant_1) (K1 RConstant_2)
	   	$call key_expand_single(K1 RConstant_2) (K2 RConstant_3)
	   	$call key_expand_single(K2 RConstant_3) (K3 RConstant_4)
	   	$call key_expand_single(K3 RConstant_4) (K4 RConstant_5)
	   	$call key_expand_single(K4 RConstant_5) (K5 RConstant_6)
	   	$call key_expand_single(K5 RConstant_6) (K6 RConstant_7)
	   	$call key_expand_single(K6 RConstant_7) (K7 RConstant_8)
	   	$call key_expand_single(K7 RConstant_8) (K8 RConstant_9)
	   	$call key_expand_single(K8 RConstant_9) (K9 RConstant_10)
	   	$call key_expand_single(K9 RConstant_10) (K10 RConstant_11)
	   	
	
	
	$dopipeline $depth 2 $buffering 1
	$merge $entry $loopback
	$endmerge
		
		in128 := e_in_data

		$volatile round_S0 := (in128 ^ K0)
		$call enc_round (round_S0 K1) (round_S1)
		$call enc_round (round_S1 K2) (round_S2)
		$call enc_round (round_S2 K3) (round_S3)
		$call enc_round (round_S3 K4) (round_S4)
		$call enc_round (round_S4 K5) (round_S5)
		$call enc_round (round_S5 K6) (round_S6)
		$call enc_round (round_S6 K7) (round_S7)
		$call enc_round (round_S7 K8) (round_S8)
		$call enc_round (round_S8 K9) (round_S9)
		$call enc_round_last (round_S9 K10) (round_S10)

		
		e_out_data := round_S10

                e_lkey_in := e_key
                $volatile $split (e_lkey_in 1 128) (e_lkey_cmd e_lkey)	
	$while (e_lkey_cmd == 0)
	$place [GotKeyCmd]
    }
}

