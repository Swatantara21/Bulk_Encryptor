$pipe  cmd_in : $uint<64>  $depth 4 
// can point into 
$noblock $pipe  d_block_done : $uint<1>  $depth 2 
// can point into 
$pipe  d_cmd_pipe : $uint<144>  $depth 2 
// can point into 
$pipe  d_in_buf : $uint<128>  $depth 2 
// can point into 
$pipe  d_out_buf : $uint<128>  $depth 2 
// can point into 
$noblock $pipe  e_block_done : $uint<1>  $depth 2 
// can point into 
$pipe  e_cmd_pipe : $uint<144>  $depth 2 
// can point into 
$pipe  e_in_buf : $uint<128>  $depth 2 
// can point into 
$pipe  e_out_buf : $uint<128>  $depth 2 
// can point into 
$pipe  in_data : $uint<64>  $depth 2 
// can point into 
$pipe  out_data : $uint<64>  $depth 2 
// can point into 
$pipe  out_wrap_cmd : $uint<64>  $depth 2 
// can point into 
$pipe  out_wrap_data : $uint<128>  $depth 2 
// can point into 
$pipe  status_out : $uint<64>  $depth 2 
// can point into 
$pipe  w_in_buf : $uint<128>  $depth 512 
// can point into 
$pipe  w_out_buf : $uint<128>  $depth 512 
// can point into 
$module [In_wrap_daemon]
$in ()
$out ()
$is
{
  $constant  ZERO_COUNT : $uint<15>:= 0  
  $constant  ONE_COUNT : $uint<15>:= 1  
  $constant  MAX_COUNT : $uint<15>:= 511  
  $branchblock [MAIN]
  {
    head_in := w_in_buf
    $volatile head0 := ( $slice head_in 127 64 ) 
    $volatile head1 := ( $slice head_in 63 0 ) 
    cmd_in := head1
    out_wrap_cmd := head1
    $volatile ED := ( $slice head1 63 63 ) 
    $volatile mode := ( $slice head1 62 60 ) 
    $volatile got_new_key := ( $slice head1 59 59 ) 
    $volatile xxx := ( $slice head1 58 15 ) 
    $volatile count := ( $slice head1 14 0 ) 
    $if (got_new_key == 1 ) $then 
    key := w_in_buf
    keyA := ( $slice key 127 64 ) 
    keyB := ( $slice key 63 0 ) 
    cmd_in := keyA
    cmd_in := keyB
    $endif
    count_blocks := (( $mux (MAX_COUNT < count) MAX_COUNT  _b0  )  | ( $mux (MAX_COUNT >= count) count  _b0  ) )
    $merge $entry loop1 
    $phi count_var := 			  ONE_COUNT $on $entry			  n_count_var $on loop1 // type of target is $uint<15>
    $endmerge
    $if (ED == 0 ) $then 
    e_in_buf := w_in_buf
    $else 
    d_in_buf := w_in_buf
    $endif
    $volatile n_count_var := (count_var + 1 )
    $if (count_var < count_blocks) $then 
    $place[loop1]
    $else 
    $if (count_var < MAX_COUNT) $then 
    $merge $entry loop2 
    $phi count_var2 := 				  n_count_var $on $entry				  n_count_var2 $on loop2 // type of target is $uint<15>
    $endmerge
    out_wrap_data := w_in_buf
    $volatile n_count_var2 := (count_var2 + 1 )
    $if (count_var2 < MAX_COUNT) $then 
    $place[loop2]
    $endif
    $endif
    $endif
  }
}
$volatile $module [Inv_Sbox_1]
$in ( s_in : $uint<8>  )
$out ( s_out : $uint<8>  )
$is
{
  $volatile IMA0 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 9  )  ($bitcast ($uint<8>) 82  ) ) 
  $volatile IMA1 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 213  )  ($bitcast ($uint<8>) 106  ) ) 
  $volatile IMA2 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 54  )  ($bitcast ($uint<8>) 48  ) ) 
  $volatile IMA3 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 56  )  ($bitcast ($uint<8>) 165  ) ) 
  $volatile IMA4 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 64  )  ($bitcast ($uint<8>) 191  ) ) 
  $volatile IMA5 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 158  )  ($bitcast ($uint<8>) 163  ) ) 
  $volatile IMA6 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 243  )  ($bitcast ($uint<8>) 129  ) ) 
  $volatile IMA7 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 251  )  ($bitcast ($uint<8>) 215  ) ) 
  $volatile IMA8 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 227  )  ($bitcast ($uint<8>) 124  ) ) 
  $volatile IMA9 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 130  )  ($bitcast ($uint<8>) 57  ) ) 
  $volatile IMA10 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 47  )  ($bitcast ($uint<8>) 155  ) ) 
  $volatile IMA11 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 135  )  ($bitcast ($uint<8>) 255  ) ) 
  $volatile IMA12 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 142  )  ($bitcast ($uint<8>) 52  ) ) 
  $volatile IMA13 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 68  )  ($bitcast ($uint<8>) 67  ) ) 
  $volatile IMA14 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 222  )  ($bitcast ($uint<8>) 196  ) ) 
  $volatile IMA15 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 203  )  ($bitcast ($uint<8>) 233  ) ) 
  $volatile IMA16 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 123  )  ($bitcast ($uint<8>) 84  ) ) 
  $volatile IMA17 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 50  )  ($bitcast ($uint<8>) 148  ) ) 
  $volatile IMA18 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 194  )  ($bitcast ($uint<8>) 166  ) ) 
  $volatile IMA19 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 61  )  ($bitcast ($uint<8>) 35  ) ) 
  $volatile IMA20 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 76  )  ($bitcast ($uint<8>) 238  ) ) 
  $volatile IMA21 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 11  )  ($bitcast ($uint<8>) 149  ) ) 
  $volatile IMA22 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 250  )  ($bitcast ($uint<8>) 66  ) ) 
  $volatile IMA23 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 78  )  ($bitcast ($uint<8>) 195  ) ) 
  $volatile IMA24 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 46  )  ($bitcast ($uint<8>) 8  ) ) 
  $volatile IMA25 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 102  )  ($bitcast ($uint<8>) 161  ) ) 
  $volatile IMA26 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 217  )  ($bitcast ($uint<8>) 40  ) ) 
  $volatile IMA27 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 178  )  ($bitcast ($uint<8>) 36  ) ) 
  $volatile IMA28 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 91  )  ($bitcast ($uint<8>) 118  ) ) 
  $volatile IMA29 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 73  )  ($bitcast ($uint<8>) 162  ) ) 
  $volatile IMA30 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 139  )  ($bitcast ($uint<8>) 109  ) ) 
  $volatile IMA31 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 37  )  ($bitcast ($uint<8>) 209  ) ) 
  $volatile IMA32 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 248  )  ($bitcast ($uint<8>) 114  ) ) 
  $volatile IMA33 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 100  )  ($bitcast ($uint<8>) 246  ) ) 
  $volatile IMA34 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 104  )  ($bitcast ($uint<8>) 134  ) ) 
  $volatile IMA35 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 22  )  ($bitcast ($uint<8>) 152  ) ) 
  $volatile IMA36 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 164  )  ($bitcast ($uint<8>) 212  ) ) 
  $volatile IMA37 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 204  )  ($bitcast ($uint<8>) 92  ) ) 
  $volatile IMA38 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 101  )  ($bitcast ($uint<8>) 93  ) ) 
  $volatile IMA39 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 146  )  ($bitcast ($uint<8>) 182  ) ) 
  $volatile IMA40 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 112  )  ($bitcast ($uint<8>) 108  ) ) 
  $volatile IMA41 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 80  )  ($bitcast ($uint<8>) 72  ) ) 
  $volatile IMA42 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 237  )  ($bitcast ($uint<8>) 253  ) ) 
  $volatile IMA43 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 218  )  ($bitcast ($uint<8>) 185  ) ) 
  $volatile IMA44 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 21  )  ($bitcast ($uint<8>) 94  ) ) 
  $volatile IMA45 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 87  )  ($bitcast ($uint<8>) 70  ) ) 
  $volatile IMA46 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 141  )  ($bitcast ($uint<8>) 167  ) ) 
  $volatile IMA47 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 132  )  ($bitcast ($uint<8>) 157  ) ) 
  $volatile IMA48 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 216  )  ($bitcast ($uint<8>) 144  ) ) 
  $volatile IMA49 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 0  )  ($bitcast ($uint<8>) 171  ) ) 
  $volatile IMA50 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 188  )  ($bitcast ($uint<8>) 140  ) ) 
  $volatile IMA51 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 10  )  ($bitcast ($uint<8>) 211  ) ) 
  $volatile IMA52 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 228  )  ($bitcast ($uint<8>) 247  ) ) 
  $volatile IMA53 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 5  )  ($bitcast ($uint<8>) 88  ) ) 
  $volatile IMA54 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 179  )  ($bitcast ($uint<8>) 184  ) ) 
  $volatile IMA55 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 6  )  ($bitcast ($uint<8>) 69  ) ) 
  $volatile IMA56 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 44  )  ($bitcast ($uint<8>) 208  ) ) 
  $volatile IMA57 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 143  )  ($bitcast ($uint<8>) 30  ) ) 
  $volatile IMA58 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 63  )  ($bitcast ($uint<8>) 202  ) ) 
  $volatile IMA59 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 2  )  ($bitcast ($uint<8>) 15  ) ) 
  $volatile IMA60 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 175  )  ($bitcast ($uint<8>) 193  ) ) 
  $volatile IMA61 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 3  )  ($bitcast ($uint<8>) 189  ) ) 
  $volatile IMA62 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 19  )  ($bitcast ($uint<8>) 1  ) ) 
  $volatile IMA63 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 107  )  ($bitcast ($uint<8>) 138  ) ) 
  $volatile IMA64 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 145  )  ($bitcast ($uint<8>) 58  ) ) 
  $volatile IMA65 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 65  )  ($bitcast ($uint<8>) 17  ) ) 
  $volatile IMA66 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 103  )  ($bitcast ($uint<8>) 79  ) ) 
  $volatile IMA67 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 234  )  ($bitcast ($uint<8>) 220  ) ) 
  $volatile IMA68 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 242  )  ($bitcast ($uint<8>) 151  ) ) 
  $volatile IMA69 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 206  )  ($bitcast ($uint<8>) 207  ) ) 
  $volatile IMA70 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 180  )  ($bitcast ($uint<8>) 240  ) ) 
  $volatile IMA71 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 115  )  ($bitcast ($uint<8>) 230  ) ) 
  $volatile IMA72 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 172  )  ($bitcast ($uint<8>) 150  ) ) 
  $volatile IMA73 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 34  )  ($bitcast ($uint<8>) 116  ) ) 
  $volatile IMA74 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 173  )  ($bitcast ($uint<8>) 231  ) ) 
  $volatile IMA75 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 133  )  ($bitcast ($uint<8>) 53  ) ) 
  $volatile IMA76 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 249  )  ($bitcast ($uint<8>) 226  ) ) 
  $volatile IMA77 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 232  )  ($bitcast ($uint<8>) 55  ) ) 
  $volatile IMA78 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 117  )  ($bitcast ($uint<8>) 28  ) ) 
  $volatile IMA79 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 110  )  ($bitcast ($uint<8>) 223  ) ) 
  $volatile IMA80 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 241  )  ($bitcast ($uint<8>) 71  ) ) 
  $volatile IMA81 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 113  )  ($bitcast ($uint<8>) 26  ) ) 
  $volatile IMA82 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 41  )  ($bitcast ($uint<8>) 29  ) ) 
  $volatile IMA83 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 137  )  ($bitcast ($uint<8>) 197  ) ) 
  $volatile IMA84 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 183  )  ($bitcast ($uint<8>) 111  ) ) 
  $volatile IMA85 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 14  )  ($bitcast ($uint<8>) 98  ) ) 
  $volatile IMA86 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 24  )  ($bitcast ($uint<8>) 170  ) ) 
  $volatile IMA87 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 27  )  ($bitcast ($uint<8>) 190  ) ) 
  $volatile IMA88 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 86  )  ($bitcast ($uint<8>) 252  ) ) 
  $volatile IMA89 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 75  )  ($bitcast ($uint<8>) 62  ) ) 
  $volatile IMA90 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 210  )  ($bitcast ($uint<8>) 198  ) ) 
  $volatile IMA91 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 32  )  ($bitcast ($uint<8>) 121  ) ) 
  $volatile IMA92 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 219  )  ($bitcast ($uint<8>) 154  ) ) 
  $volatile IMA93 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 254  )  ($bitcast ($uint<8>) 192  ) ) 
  $volatile IMA94 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 205  )  ($bitcast ($uint<8>) 120  ) ) 
  $volatile IMA95 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 244  )  ($bitcast ($uint<8>) 90  ) ) 
  $volatile IMA96 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 221  )  ($bitcast ($uint<8>) 31  ) ) 
  $volatile IMA97 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 51  )  ($bitcast ($uint<8>) 168  ) ) 
  $volatile IMA98 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 7  )  ($bitcast ($uint<8>) 136  ) ) 
  $volatile IMA99 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 49  )  ($bitcast ($uint<8>) 199  ) ) 
  $volatile IMA100 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 18  )  ($bitcast ($uint<8>) 177  ) ) 
  $volatile IMA101 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 89  )  ($bitcast ($uint<8>) 16  ) ) 
  $volatile IMA102 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 128  )  ($bitcast ($uint<8>) 39  ) ) 
  $volatile IMA103 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 95  )  ($bitcast ($uint<8>) 236  ) ) 
  $volatile IMA104 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 81  )  ($bitcast ($uint<8>) 96  ) ) 
  $volatile IMA105 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 169  )  ($bitcast ($uint<8>) 127  ) ) 
  $volatile IMA106 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 181  )  ($bitcast ($uint<8>) 25  ) ) 
  $volatile IMA107 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 13  )  ($bitcast ($uint<8>) 74  ) ) 
  $volatile IMA108 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 229  )  ($bitcast ($uint<8>) 45  ) ) 
  $volatile IMA109 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 159  )  ($bitcast ($uint<8>) 122  ) ) 
  $volatile IMA110 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 201  )  ($bitcast ($uint<8>) 147  ) ) 
  $volatile IMA111 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 239  )  ($bitcast ($uint<8>) 156  ) ) 
  $volatile IMA112 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 224  )  ($bitcast ($uint<8>) 160  ) ) 
  $volatile IMA113 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 77  )  ($bitcast ($uint<8>) 59  ) ) 
  $volatile IMA114 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 42  )  ($bitcast ($uint<8>) 174  ) ) 
  $volatile IMA115 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 176  )  ($bitcast ($uint<8>) 245  ) ) 
  $volatile IMA116 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 235  )  ($bitcast ($uint<8>) 200  ) ) 
  $volatile IMA117 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 60  )  ($bitcast ($uint<8>) 187  ) ) 
  $volatile IMA118 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 83  )  ($bitcast ($uint<8>) 131  ) ) 
  $volatile IMA119 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 97  )  ($bitcast ($uint<8>) 153  ) ) 
  $volatile IMA120 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 43  )  ($bitcast ($uint<8>) 23  ) ) 
  $volatile IMA121 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 126  )  ($bitcast ($uint<8>) 4  ) ) 
  $volatile IMA122 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 119  )  ($bitcast ($uint<8>) 186  ) ) 
  $volatile IMA123 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 38  )  ($bitcast ($uint<8>) 214  ) ) 
  $volatile IMA124 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 105  )  ($bitcast ($uint<8>) 225  ) ) 
  $volatile IMA125 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 99  )  ($bitcast ($uint<8>) 20  ) ) 
  $volatile IMA126 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 33  )  ($bitcast ($uint<8>) 85  ) ) 
  $volatile IMA127 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 125  )  ($bitcast ($uint<8>) 12  ) ) 
  $volatile IMB0 := ( $mux (s_in [] 1 ) IMA1  IMA0 ) 
  $volatile IMB1 := ( $mux (s_in [] 1 ) IMA3  IMA2 ) 
  $volatile IMB2 := ( $mux (s_in [] 1 ) IMA5  IMA4 ) 
  $volatile IMB3 := ( $mux (s_in [] 1 ) IMA7  IMA6 ) 
  $volatile IMB4 := ( $mux (s_in [] 1 ) IMA9  IMA8 ) 
  $volatile IMB5 := ( $mux (s_in [] 1 ) IMA11  IMA10 ) 
  $volatile IMB6 := ( $mux (s_in [] 1 ) IMA13  IMA12 ) 
  $volatile IMB7 := ( $mux (s_in [] 1 ) IMA15  IMA14 ) 
  $volatile IMB8 := ( $mux (s_in [] 1 ) IMA17  IMA16 ) 
  $volatile IMB9 := ( $mux (s_in [] 1 ) IMA19  IMA18 ) 
  $volatile IMB10 := ( $mux (s_in [] 1 ) IMA21  IMA20 ) 
  $volatile IMB11 := ( $mux (s_in [] 1 ) IMA23  IMA22 ) 
  $volatile IMB12 := ( $mux (s_in [] 1 ) IMA25  IMA24 ) 
  $volatile IMB13 := ( $mux (s_in [] 1 ) IMA27  IMA26 ) 
  $volatile IMB14 := ( $mux (s_in [] 1 ) IMA29  IMA28 ) 
  $volatile IMB15 := ( $mux (s_in [] 1 ) IMA31  IMA30 ) 
  $volatile IMB16 := ( $mux (s_in [] 1 ) IMA33  IMA32 ) 
  $volatile IMB17 := ( $mux (s_in [] 1 ) IMA35  IMA34 ) 
  $volatile IMB18 := ( $mux (s_in [] 1 ) IMA37  IMA36 ) 
  $volatile IMB19 := ( $mux (s_in [] 1 ) IMA39  IMA38 ) 
  $volatile IMB20 := ( $mux (s_in [] 1 ) IMA41  IMA40 ) 
  $volatile IMB21 := ( $mux (s_in [] 1 ) IMA43  IMA42 ) 
  $volatile IMB22 := ( $mux (s_in [] 1 ) IMA45  IMA44 ) 
  $volatile IMB23 := ( $mux (s_in [] 1 ) IMA47  IMA46 ) 
  $volatile IMB24 := ( $mux (s_in [] 1 ) IMA49  IMA48 ) 
  $volatile IMB25 := ( $mux (s_in [] 1 ) IMA51  IMA50 ) 
  $volatile IMB26 := ( $mux (s_in [] 1 ) IMA53  IMA52 ) 
  $volatile IMB27 := ( $mux (s_in [] 1 ) IMA55  IMA54 ) 
  $volatile IMB28 := ( $mux (s_in [] 1 ) IMA57  IMA56 ) 
  $volatile IMB29 := ( $mux (s_in [] 1 ) IMA59  IMA58 ) 
  $volatile IMB30 := ( $mux (s_in [] 1 ) IMA61  IMA60 ) 
  $volatile IMB31 := ( $mux (s_in [] 1 ) IMA63  IMA62 ) 
  $volatile IMB32 := ( $mux (s_in [] 1 ) IMA65  IMA64 ) 
  $volatile IMB33 := ( $mux (s_in [] 1 ) IMA67  IMA66 ) 
  $volatile IMB34 := ( $mux (s_in [] 1 ) IMA69  IMA68 ) 
  $volatile IMB35 := ( $mux (s_in [] 1 ) IMA71  IMA70 ) 
  $volatile IMB36 := ( $mux (s_in [] 1 ) IMA73  IMA72 ) 
  $volatile IMB37 := ( $mux (s_in [] 1 ) IMA75  IMA74 ) 
  $volatile IMB38 := ( $mux (s_in [] 1 ) IMA77  IMA76 ) 
  $volatile IMB39 := ( $mux (s_in [] 1 ) IMA79  IMA78 ) 
  $volatile IMB40 := ( $mux (s_in [] 1 ) IMA81  IMA80 ) 
  $volatile IMB41 := ( $mux (s_in [] 1 ) IMA83  IMA82 ) 
  $volatile IMB42 := ( $mux (s_in [] 1 ) IMA85  IMA84 ) 
  $volatile IMB43 := ( $mux (s_in [] 1 ) IMA87  IMA86 ) 
  $volatile IMB44 := ( $mux (s_in [] 1 ) IMA89  IMA88 ) 
  $volatile IMB45 := ( $mux (s_in [] 1 ) IMA91  IMA90 ) 
  $volatile IMB46 := ( $mux (s_in [] 1 ) IMA93  IMA92 ) 
  $volatile IMB47 := ( $mux (s_in [] 1 ) IMA95  IMA94 ) 
  $volatile IMB48 := ( $mux (s_in [] 1 ) IMA97  IMA96 ) 
  $volatile IMB49 := ( $mux (s_in [] 1 ) IMA99  IMA98 ) 
  $volatile IMB50 := ( $mux (s_in [] 1 ) IMA101  IMA100 ) 
  $volatile IMB51 := ( $mux (s_in [] 1 ) IMA103  IMA102 ) 
  $volatile IMB52 := ( $mux (s_in [] 1 ) IMA105  IMA104 ) 
  $volatile IMB53 := ( $mux (s_in [] 1 ) IMA107  IMA106 ) 
  $volatile IMB54 := ( $mux (s_in [] 1 ) IMA109  IMA108 ) 
  $volatile IMB55 := ( $mux (s_in [] 1 ) IMA111  IMA110 ) 
  $volatile IMB56 := ( $mux (s_in [] 1 ) IMA113  IMA112 ) 
  $volatile IMB57 := ( $mux (s_in [] 1 ) IMA115  IMA114 ) 
  $volatile IMB58 := ( $mux (s_in [] 1 ) IMA117  IMA116 ) 
  $volatile IMB59 := ( $mux (s_in [] 1 ) IMA119  IMA118 ) 
  $volatile IMB60 := ( $mux (s_in [] 1 ) IMA121  IMA120 ) 
  $volatile IMB61 := ( $mux (s_in [] 1 ) IMA123  IMA122 ) 
  $volatile IMB62 := ( $mux (s_in [] 1 ) IMA125  IMA124 ) 
  $volatile IMB63 := ( $mux (s_in [] 1 ) IMA127  IMA126 ) 
  $volatile IMC0 := ( $mux (s_in [] 2 ) IMB1  IMB0 ) 
  $volatile IMC1 := ( $mux (s_in [] 2 ) IMB3  IMB2 ) 
  $volatile IMC2 := ( $mux (s_in [] 2 ) IMB5  IMB4 ) 
  $volatile IMC3 := ( $mux (s_in [] 2 ) IMB7  IMB6 ) 
  $volatile IMC4 := ( $mux (s_in [] 2 ) IMB9  IMB8 ) 
  $volatile IMC5 := ( $mux (s_in [] 2 ) IMB11  IMB10 ) 
  $volatile IMC6 := ( $mux (s_in [] 2 ) IMB13  IMB12 ) 
  $volatile IMC7 := ( $mux (s_in [] 2 ) IMB15  IMB14 ) 
  $volatile IMC8 := ( $mux (s_in [] 2 ) IMB17  IMB16 ) 
  $volatile IMC9 := ( $mux (s_in [] 2 ) IMB19  IMB18 ) 
  $volatile IMC10 := ( $mux (s_in [] 2 ) IMB21  IMB20 ) 
  $volatile IMC11 := ( $mux (s_in [] 2 ) IMB23  IMB22 ) 
  $volatile IMC12 := ( $mux (s_in [] 2 ) IMB25  IMB24 ) 
  $volatile IMC13 := ( $mux (s_in [] 2 ) IMB27  IMB26 ) 
  $volatile IMC14 := ( $mux (s_in [] 2 ) IMB29  IMB28 ) 
  $volatile IMC15 := ( $mux (s_in [] 2 ) IMB31  IMB30 ) 
  $volatile IMC16 := ( $mux (s_in [] 2 ) IMB33  IMB32 ) 
  $volatile IMC17 := ( $mux (s_in [] 2 ) IMB35  IMB34 ) 
  $volatile IMC18 := ( $mux (s_in [] 2 ) IMB37  IMB36 ) 
  $volatile IMC19 := ( $mux (s_in [] 2 ) IMB39  IMB38 ) 
  $volatile IMC20 := ( $mux (s_in [] 2 ) IMB41  IMB40 ) 
  $volatile IMC21 := ( $mux (s_in [] 2 ) IMB43  IMB42 ) 
  $volatile IMC22 := ( $mux (s_in [] 2 ) IMB45  IMB44 ) 
  $volatile IMC23 := ( $mux (s_in [] 2 ) IMB47  IMB46 ) 
  $volatile IMC24 := ( $mux (s_in [] 2 ) IMB49  IMB48 ) 
  $volatile IMC25 := ( $mux (s_in [] 2 ) IMB51  IMB50 ) 
  $volatile IMC26 := ( $mux (s_in [] 2 ) IMB53  IMB52 ) 
  $volatile IMC27 := ( $mux (s_in [] 2 ) IMB55  IMB54 ) 
  $volatile IMC28 := ( $mux (s_in [] 2 ) IMB57  IMB56 ) 
  $volatile IMC29 := ( $mux (s_in [] 2 ) IMB59  IMB58 ) 
  $volatile IMC30 := ( $mux (s_in [] 2 ) IMB61  IMB60 ) 
  $volatile IMC31 := ( $mux (s_in [] 2 ) IMB63  IMB62 ) 
  $volatile IMD0 := ( $mux (s_in [] 3 ) IMC1  IMC0 ) 
  $volatile IMD1 := ( $mux (s_in [] 3 ) IMC3  IMC2 ) 
  $volatile IMD2 := ( $mux (s_in [] 3 ) IMC5  IMC4 ) 
  $volatile IMD3 := ( $mux (s_in [] 3 ) IMC7  IMC6 ) 
  $volatile IMD4 := ( $mux (s_in [] 3 ) IMC9  IMC8 ) 
  $volatile IMD5 := ( $mux (s_in [] 3 ) IMC11  IMC10 ) 
  $volatile IMD6 := ( $mux (s_in [] 3 ) IMC13  IMC12 ) 
  $volatile IMD7 := ( $mux (s_in [] 3 ) IMC15  IMC14 ) 
  $volatile IMD8 := ( $mux (s_in [] 3 ) IMC17  IMC16 ) 
  $volatile IMD9 := ( $mux (s_in [] 3 ) IMC19  IMC18 ) 
  $volatile IMD10 := ( $mux (s_in [] 3 ) IMC21  IMC20 ) 
  $volatile IMD11 := ( $mux (s_in [] 3 ) IMC23  IMC22 ) 
  $volatile IMD12 := ( $mux (s_in [] 3 ) IMC25  IMC24 ) 
  $volatile IMD13 := ( $mux (s_in [] 3 ) IMC27  IMC26 ) 
  $volatile IMD14 := ( $mux (s_in [] 3 ) IMC29  IMC28 ) 
  $volatile IMD15 := ( $mux (s_in [] 3 ) IMC31  IMC30 ) 
  $volatile IME0 := ( $mux (s_in [] 4 ) IMD1  IMD0 ) 
  $volatile IME1 := ( $mux (s_in [] 4 ) IMD3  IMD2 ) 
  $volatile IME2 := ( $mux (s_in [] 4 ) IMD5  IMD4 ) 
  $volatile IME3 := ( $mux (s_in [] 4 ) IMD7  IMD6 ) 
  $volatile IME4 := ( $mux (s_in [] 4 ) IMD9  IMD8 ) 
  $volatile IME5 := ( $mux (s_in [] 4 ) IMD11  IMD10 ) 
  $volatile IME6 := ( $mux (s_in [] 4 ) IMD13  IMD12 ) 
  $volatile IME7 := ( $mux (s_in [] 4 ) IMD15  IMD14 ) 
  $volatile IMF0 := ( $mux (s_in [] 5 ) IME1  IME0 ) 
  $volatile IMF1 := ( $mux (s_in [] 5 ) IME3  IME2 ) 
  $volatile IMF2 := ( $mux (s_in [] 5 ) IME5  IME4 ) 
  $volatile IMF3 := ( $mux (s_in [] 5 ) IME7  IME6 ) 
  $volatile IMG0 := ( $mux (s_in [] 6 ) IMF1  IMF0 ) 
  $volatile IMG1 := ( $mux (s_in [] 6 ) IMF3  IMF2 ) 
  s_out := ( $mux (s_in [] 7 ) IMG1  IMG0 ) 
}
$volatile $module [Inv_Sbox_2]
$in ( s_in : $uint<8>  )
$out ( s_out : $uint<8>  )
$is
{
  $volatile IMA0 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 9  )  ($bitcast ($uint<8>) 82  ) ) 
  $volatile IMA1 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 213  )  ($bitcast ($uint<8>) 106  ) ) 
  $volatile IMA2 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 54  )  ($bitcast ($uint<8>) 48  ) ) 
  $volatile IMA3 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 56  )  ($bitcast ($uint<8>) 165  ) ) 
  $volatile IMA4 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 64  )  ($bitcast ($uint<8>) 191  ) ) 
  $volatile IMA5 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 158  )  ($bitcast ($uint<8>) 163  ) ) 
  $volatile IMA6 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 243  )  ($bitcast ($uint<8>) 129  ) ) 
  $volatile IMA7 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 251  )  ($bitcast ($uint<8>) 215  ) ) 
  $volatile IMA8 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 227  )  ($bitcast ($uint<8>) 124  ) ) 
  $volatile IMA9 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 130  )  ($bitcast ($uint<8>) 57  ) ) 
  $volatile IMA10 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 47  )  ($bitcast ($uint<8>) 155  ) ) 
  $volatile IMA11 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 135  )  ($bitcast ($uint<8>) 255  ) ) 
  $volatile IMA12 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 142  )  ($bitcast ($uint<8>) 52  ) ) 
  $volatile IMA13 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 68  )  ($bitcast ($uint<8>) 67  ) ) 
  $volatile IMA14 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 222  )  ($bitcast ($uint<8>) 196  ) ) 
  $volatile IMA15 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 203  )  ($bitcast ($uint<8>) 233  ) ) 
  $volatile IMA16 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 123  )  ($bitcast ($uint<8>) 84  ) ) 
  $volatile IMA17 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 50  )  ($bitcast ($uint<8>) 148  ) ) 
  $volatile IMA18 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 194  )  ($bitcast ($uint<8>) 166  ) ) 
  $volatile IMA19 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 61  )  ($bitcast ($uint<8>) 35  ) ) 
  $volatile IMA20 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 76  )  ($bitcast ($uint<8>) 238  ) ) 
  $volatile IMA21 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 11  )  ($bitcast ($uint<8>) 149  ) ) 
  $volatile IMA22 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 250  )  ($bitcast ($uint<8>) 66  ) ) 
  $volatile IMA23 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 78  )  ($bitcast ($uint<8>) 195  ) ) 
  $volatile IMA24 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 46  )  ($bitcast ($uint<8>) 8  ) ) 
  $volatile IMA25 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 102  )  ($bitcast ($uint<8>) 161  ) ) 
  $volatile IMA26 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 217  )  ($bitcast ($uint<8>) 40  ) ) 
  $volatile IMA27 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 178  )  ($bitcast ($uint<8>) 36  ) ) 
  $volatile IMA28 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 91  )  ($bitcast ($uint<8>) 118  ) ) 
  $volatile IMA29 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 73  )  ($bitcast ($uint<8>) 162  ) ) 
  $volatile IMA30 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 139  )  ($bitcast ($uint<8>) 109  ) ) 
  $volatile IMA31 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 37  )  ($bitcast ($uint<8>) 209  ) ) 
  $volatile IMA32 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 248  )  ($bitcast ($uint<8>) 114  ) ) 
  $volatile IMA33 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 100  )  ($bitcast ($uint<8>) 246  ) ) 
  $volatile IMA34 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 104  )  ($bitcast ($uint<8>) 134  ) ) 
  $volatile IMA35 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 22  )  ($bitcast ($uint<8>) 152  ) ) 
  $volatile IMA36 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 164  )  ($bitcast ($uint<8>) 212  ) ) 
  $volatile IMA37 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 204  )  ($bitcast ($uint<8>) 92  ) ) 
  $volatile IMA38 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 101  )  ($bitcast ($uint<8>) 93  ) ) 
  $volatile IMA39 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 146  )  ($bitcast ($uint<8>) 182  ) ) 
  $volatile IMA40 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 112  )  ($bitcast ($uint<8>) 108  ) ) 
  $volatile IMA41 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 80  )  ($bitcast ($uint<8>) 72  ) ) 
  $volatile IMA42 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 237  )  ($bitcast ($uint<8>) 253  ) ) 
  $volatile IMA43 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 218  )  ($bitcast ($uint<8>) 185  ) ) 
  $volatile IMA44 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 21  )  ($bitcast ($uint<8>) 94  ) ) 
  $volatile IMA45 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 87  )  ($bitcast ($uint<8>) 70  ) ) 
  $volatile IMA46 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 141  )  ($bitcast ($uint<8>) 167  ) ) 
  $volatile IMA47 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 132  )  ($bitcast ($uint<8>) 157  ) ) 
  $volatile IMA48 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 216  )  ($bitcast ($uint<8>) 144  ) ) 
  $volatile IMA49 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 0  )  ($bitcast ($uint<8>) 171  ) ) 
  $volatile IMA50 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 188  )  ($bitcast ($uint<8>) 140  ) ) 
  $volatile IMA51 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 10  )  ($bitcast ($uint<8>) 211  ) ) 
  $volatile IMA52 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 228  )  ($bitcast ($uint<8>) 247  ) ) 
  $volatile IMA53 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 5  )  ($bitcast ($uint<8>) 88  ) ) 
  $volatile IMA54 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 179  )  ($bitcast ($uint<8>) 184  ) ) 
  $volatile IMA55 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 6  )  ($bitcast ($uint<8>) 69  ) ) 
  $volatile IMA56 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 44  )  ($bitcast ($uint<8>) 208  ) ) 
  $volatile IMA57 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 143  )  ($bitcast ($uint<8>) 30  ) ) 
  $volatile IMA58 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 63  )  ($bitcast ($uint<8>) 202  ) ) 
  $volatile IMA59 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 2  )  ($bitcast ($uint<8>) 15  ) ) 
  $volatile IMA60 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 175  )  ($bitcast ($uint<8>) 193  ) ) 
  $volatile IMA61 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 3  )  ($bitcast ($uint<8>) 189  ) ) 
  $volatile IMA62 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 19  )  ($bitcast ($uint<8>) 1  ) ) 
  $volatile IMA63 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 107  )  ($bitcast ($uint<8>) 138  ) ) 
  $volatile IMA64 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 145  )  ($bitcast ($uint<8>) 58  ) ) 
  $volatile IMA65 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 65  )  ($bitcast ($uint<8>) 17  ) ) 
  $volatile IMA66 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 103  )  ($bitcast ($uint<8>) 79  ) ) 
  $volatile IMA67 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 234  )  ($bitcast ($uint<8>) 220  ) ) 
  $volatile IMA68 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 242  )  ($bitcast ($uint<8>) 151  ) ) 
  $volatile IMA69 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 206  )  ($bitcast ($uint<8>) 207  ) ) 
  $volatile IMA70 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 180  )  ($bitcast ($uint<8>) 240  ) ) 
  $volatile IMA71 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 115  )  ($bitcast ($uint<8>) 230  ) ) 
  $volatile IMA72 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 172  )  ($bitcast ($uint<8>) 150  ) ) 
  $volatile IMA73 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 34  )  ($bitcast ($uint<8>) 116  ) ) 
  $volatile IMA74 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 173  )  ($bitcast ($uint<8>) 231  ) ) 
  $volatile IMA75 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 133  )  ($bitcast ($uint<8>) 53  ) ) 
  $volatile IMA76 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 249  )  ($bitcast ($uint<8>) 226  ) ) 
  $volatile IMA77 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 232  )  ($bitcast ($uint<8>) 55  ) ) 
  $volatile IMA78 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 117  )  ($bitcast ($uint<8>) 28  ) ) 
  $volatile IMA79 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 110  )  ($bitcast ($uint<8>) 223  ) ) 
  $volatile IMA80 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 241  )  ($bitcast ($uint<8>) 71  ) ) 
  $volatile IMA81 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 113  )  ($bitcast ($uint<8>) 26  ) ) 
  $volatile IMA82 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 41  )  ($bitcast ($uint<8>) 29  ) ) 
  $volatile IMA83 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 137  )  ($bitcast ($uint<8>) 197  ) ) 
  $volatile IMA84 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 183  )  ($bitcast ($uint<8>) 111  ) ) 
  $volatile IMA85 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 14  )  ($bitcast ($uint<8>) 98  ) ) 
  $volatile IMA86 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 24  )  ($bitcast ($uint<8>) 170  ) ) 
  $volatile IMA87 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 27  )  ($bitcast ($uint<8>) 190  ) ) 
  $volatile IMA88 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 86  )  ($bitcast ($uint<8>) 252  ) ) 
  $volatile IMA89 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 75  )  ($bitcast ($uint<8>) 62  ) ) 
  $volatile IMA90 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 210  )  ($bitcast ($uint<8>) 198  ) ) 
  $volatile IMA91 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 32  )  ($bitcast ($uint<8>) 121  ) ) 
  $volatile IMA92 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 219  )  ($bitcast ($uint<8>) 154  ) ) 
  $volatile IMA93 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 254  )  ($bitcast ($uint<8>) 192  ) ) 
  $volatile IMA94 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 205  )  ($bitcast ($uint<8>) 120  ) ) 
  $volatile IMA95 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 244  )  ($bitcast ($uint<8>) 90  ) ) 
  $volatile IMA96 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 221  )  ($bitcast ($uint<8>) 31  ) ) 
  $volatile IMA97 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 51  )  ($bitcast ($uint<8>) 168  ) ) 
  $volatile IMA98 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 7  )  ($bitcast ($uint<8>) 136  ) ) 
  $volatile IMA99 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 49  )  ($bitcast ($uint<8>) 199  ) ) 
  $volatile IMA100 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 18  )  ($bitcast ($uint<8>) 177  ) ) 
  $volatile IMA101 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 89  )  ($bitcast ($uint<8>) 16  ) ) 
  $volatile IMA102 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 128  )  ($bitcast ($uint<8>) 39  ) ) 
  $volatile IMA103 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 95  )  ($bitcast ($uint<8>) 236  ) ) 
  $volatile IMA104 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 81  )  ($bitcast ($uint<8>) 96  ) ) 
  $volatile IMA105 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 169  )  ($bitcast ($uint<8>) 127  ) ) 
  $volatile IMA106 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 181  )  ($bitcast ($uint<8>) 25  ) ) 
  $volatile IMA107 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 13  )  ($bitcast ($uint<8>) 74  ) ) 
  $volatile IMA108 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 229  )  ($bitcast ($uint<8>) 45  ) ) 
  $volatile IMA109 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 159  )  ($bitcast ($uint<8>) 122  ) ) 
  $volatile IMA110 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 201  )  ($bitcast ($uint<8>) 147  ) ) 
  $volatile IMA111 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 239  )  ($bitcast ($uint<8>) 156  ) ) 
  $volatile IMA112 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 224  )  ($bitcast ($uint<8>) 160  ) ) 
  $volatile IMA113 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 77  )  ($bitcast ($uint<8>) 59  ) ) 
  $volatile IMA114 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 42  )  ($bitcast ($uint<8>) 174  ) ) 
  $volatile IMA115 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 176  )  ($bitcast ($uint<8>) 245  ) ) 
  $volatile IMA116 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 235  )  ($bitcast ($uint<8>) 200  ) ) 
  $volatile IMA117 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 60  )  ($bitcast ($uint<8>) 187  ) ) 
  $volatile IMA118 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 83  )  ($bitcast ($uint<8>) 131  ) ) 
  $volatile IMA119 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 97  )  ($bitcast ($uint<8>) 153  ) ) 
  $volatile IMA120 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 43  )  ($bitcast ($uint<8>) 23  ) ) 
  $volatile IMA121 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 126  )  ($bitcast ($uint<8>) 4  ) ) 
  $volatile IMA122 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 119  )  ($bitcast ($uint<8>) 186  ) ) 
  $volatile IMA123 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 38  )  ($bitcast ($uint<8>) 214  ) ) 
  $volatile IMA124 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 105  )  ($bitcast ($uint<8>) 225  ) ) 
  $volatile IMA125 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 99  )  ($bitcast ($uint<8>) 20  ) ) 
  $volatile IMA126 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 33  )  ($bitcast ($uint<8>) 85  ) ) 
  $volatile IMA127 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 125  )  ($bitcast ($uint<8>) 12  ) ) 
  $volatile IMB0 := ( $mux (s_in [] 1 ) IMA1  IMA0 ) 
  $volatile IMB1 := ( $mux (s_in [] 1 ) IMA3  IMA2 ) 
  $volatile IMB2 := ( $mux (s_in [] 1 ) IMA5  IMA4 ) 
  $volatile IMB3 := ( $mux (s_in [] 1 ) IMA7  IMA6 ) 
  $volatile IMB4 := ( $mux (s_in [] 1 ) IMA9  IMA8 ) 
  $volatile IMB5 := ( $mux (s_in [] 1 ) IMA11  IMA10 ) 
  $volatile IMB6 := ( $mux (s_in [] 1 ) IMA13  IMA12 ) 
  $volatile IMB7 := ( $mux (s_in [] 1 ) IMA15  IMA14 ) 
  $volatile IMB8 := ( $mux (s_in [] 1 ) IMA17  IMA16 ) 
  $volatile IMB9 := ( $mux (s_in [] 1 ) IMA19  IMA18 ) 
  $volatile IMB10 := ( $mux (s_in [] 1 ) IMA21  IMA20 ) 
  $volatile IMB11 := ( $mux (s_in [] 1 ) IMA23  IMA22 ) 
  $volatile IMB12 := ( $mux (s_in [] 1 ) IMA25  IMA24 ) 
  $volatile IMB13 := ( $mux (s_in [] 1 ) IMA27  IMA26 ) 
  $volatile IMB14 := ( $mux (s_in [] 1 ) IMA29  IMA28 ) 
  $volatile IMB15 := ( $mux (s_in [] 1 ) IMA31  IMA30 ) 
  $volatile IMB16 := ( $mux (s_in [] 1 ) IMA33  IMA32 ) 
  $volatile IMB17 := ( $mux (s_in [] 1 ) IMA35  IMA34 ) 
  $volatile IMB18 := ( $mux (s_in [] 1 ) IMA37  IMA36 ) 
  $volatile IMB19 := ( $mux (s_in [] 1 ) IMA39  IMA38 ) 
  $volatile IMB20 := ( $mux (s_in [] 1 ) IMA41  IMA40 ) 
  $volatile IMB21 := ( $mux (s_in [] 1 ) IMA43  IMA42 ) 
  $volatile IMB22 := ( $mux (s_in [] 1 ) IMA45  IMA44 ) 
  $volatile IMB23 := ( $mux (s_in [] 1 ) IMA47  IMA46 ) 
  $volatile IMB24 := ( $mux (s_in [] 1 ) IMA49  IMA48 ) 
  $volatile IMB25 := ( $mux (s_in [] 1 ) IMA51  IMA50 ) 
  $volatile IMB26 := ( $mux (s_in [] 1 ) IMA53  IMA52 ) 
  $volatile IMB27 := ( $mux (s_in [] 1 ) IMA55  IMA54 ) 
  $volatile IMB28 := ( $mux (s_in [] 1 ) IMA57  IMA56 ) 
  $volatile IMB29 := ( $mux (s_in [] 1 ) IMA59  IMA58 ) 
  $volatile IMB30 := ( $mux (s_in [] 1 ) IMA61  IMA60 ) 
  $volatile IMB31 := ( $mux (s_in [] 1 ) IMA63  IMA62 ) 
  $volatile IMB32 := ( $mux (s_in [] 1 ) IMA65  IMA64 ) 
  $volatile IMB33 := ( $mux (s_in [] 1 ) IMA67  IMA66 ) 
  $volatile IMB34 := ( $mux (s_in [] 1 ) IMA69  IMA68 ) 
  $volatile IMB35 := ( $mux (s_in [] 1 ) IMA71  IMA70 ) 
  $volatile IMB36 := ( $mux (s_in [] 1 ) IMA73  IMA72 ) 
  $volatile IMB37 := ( $mux (s_in [] 1 ) IMA75  IMA74 ) 
  $volatile IMB38 := ( $mux (s_in [] 1 ) IMA77  IMA76 ) 
  $volatile IMB39 := ( $mux (s_in [] 1 ) IMA79  IMA78 ) 
  $volatile IMB40 := ( $mux (s_in [] 1 ) IMA81  IMA80 ) 
  $volatile IMB41 := ( $mux (s_in [] 1 ) IMA83  IMA82 ) 
  $volatile IMB42 := ( $mux (s_in [] 1 ) IMA85  IMA84 ) 
  $volatile IMB43 := ( $mux (s_in [] 1 ) IMA87  IMA86 ) 
  $volatile IMB44 := ( $mux (s_in [] 1 ) IMA89  IMA88 ) 
  $volatile IMB45 := ( $mux (s_in [] 1 ) IMA91  IMA90 ) 
  $volatile IMB46 := ( $mux (s_in [] 1 ) IMA93  IMA92 ) 
  $volatile IMB47 := ( $mux (s_in [] 1 ) IMA95  IMA94 ) 
  $volatile IMB48 := ( $mux (s_in [] 1 ) IMA97  IMA96 ) 
  $volatile IMB49 := ( $mux (s_in [] 1 ) IMA99  IMA98 ) 
  $volatile IMB50 := ( $mux (s_in [] 1 ) IMA101  IMA100 ) 
  $volatile IMB51 := ( $mux (s_in [] 1 ) IMA103  IMA102 ) 
  $volatile IMB52 := ( $mux (s_in [] 1 ) IMA105  IMA104 ) 
  $volatile IMB53 := ( $mux (s_in [] 1 ) IMA107  IMA106 ) 
  $volatile IMB54 := ( $mux (s_in [] 1 ) IMA109  IMA108 ) 
  $volatile IMB55 := ( $mux (s_in [] 1 ) IMA111  IMA110 ) 
  $volatile IMB56 := ( $mux (s_in [] 1 ) IMA113  IMA112 ) 
  $volatile IMB57 := ( $mux (s_in [] 1 ) IMA115  IMA114 ) 
  $volatile IMB58 := ( $mux (s_in [] 1 ) IMA117  IMA116 ) 
  $volatile IMB59 := ( $mux (s_in [] 1 ) IMA119  IMA118 ) 
  $volatile IMB60 := ( $mux (s_in [] 1 ) IMA121  IMA120 ) 
  $volatile IMB61 := ( $mux (s_in [] 1 ) IMA123  IMA122 ) 
  $volatile IMB62 := ( $mux (s_in [] 1 ) IMA125  IMA124 ) 
  $volatile IMB63 := ( $mux (s_in [] 1 ) IMA127  IMA126 ) 
  $volatile IMC0 := ( $mux (s_in [] 2 ) IMB1  IMB0 ) 
  $volatile IMC1 := ( $mux (s_in [] 2 ) IMB3  IMB2 ) 
  $volatile IMC2 := ( $mux (s_in [] 2 ) IMB5  IMB4 ) 
  $volatile IMC3 := ( $mux (s_in [] 2 ) IMB7  IMB6 ) 
  $volatile IMC4 := ( $mux (s_in [] 2 ) IMB9  IMB8 ) 
  $volatile IMC5 := ( $mux (s_in [] 2 ) IMB11  IMB10 ) 
  $volatile IMC6 := ( $mux (s_in [] 2 ) IMB13  IMB12 ) 
  $volatile IMC7 := ( $mux (s_in [] 2 ) IMB15  IMB14 ) 
  $volatile IMC8 := ( $mux (s_in [] 2 ) IMB17  IMB16 ) 
  $volatile IMC9 := ( $mux (s_in [] 2 ) IMB19  IMB18 ) 
  $volatile IMC10 := ( $mux (s_in [] 2 ) IMB21  IMB20 ) 
  $volatile IMC11 := ( $mux (s_in [] 2 ) IMB23  IMB22 ) 
  $volatile IMC12 := ( $mux (s_in [] 2 ) IMB25  IMB24 ) 
  $volatile IMC13 := ( $mux (s_in [] 2 ) IMB27  IMB26 ) 
  $volatile IMC14 := ( $mux (s_in [] 2 ) IMB29  IMB28 ) 
  $volatile IMC15 := ( $mux (s_in [] 2 ) IMB31  IMB30 ) 
  $volatile IMC16 := ( $mux (s_in [] 2 ) IMB33  IMB32 ) 
  $volatile IMC17 := ( $mux (s_in [] 2 ) IMB35  IMB34 ) 
  $volatile IMC18 := ( $mux (s_in [] 2 ) IMB37  IMB36 ) 
  $volatile IMC19 := ( $mux (s_in [] 2 ) IMB39  IMB38 ) 
  $volatile IMC20 := ( $mux (s_in [] 2 ) IMB41  IMB40 ) 
  $volatile IMC21 := ( $mux (s_in [] 2 ) IMB43  IMB42 ) 
  $volatile IMC22 := ( $mux (s_in [] 2 ) IMB45  IMB44 ) 
  $volatile IMC23 := ( $mux (s_in [] 2 ) IMB47  IMB46 ) 
  $volatile IMC24 := ( $mux (s_in [] 2 ) IMB49  IMB48 ) 
  $volatile IMC25 := ( $mux (s_in [] 2 ) IMB51  IMB50 ) 
  $volatile IMC26 := ( $mux (s_in [] 2 ) IMB53  IMB52 ) 
  $volatile IMC27 := ( $mux (s_in [] 2 ) IMB55  IMB54 ) 
  $volatile IMC28 := ( $mux (s_in [] 2 ) IMB57  IMB56 ) 
  $volatile IMC29 := ( $mux (s_in [] 2 ) IMB59  IMB58 ) 
  $volatile IMC30 := ( $mux (s_in [] 2 ) IMB61  IMB60 ) 
  $volatile IMC31 := ( $mux (s_in [] 2 ) IMB63  IMB62 ) 
  $volatile IMD0 := ( $mux (s_in [] 3 ) IMC1  IMC0 ) 
  $volatile IMD1 := ( $mux (s_in [] 3 ) IMC3  IMC2 ) 
  $volatile IMD2 := ( $mux (s_in [] 3 ) IMC5  IMC4 ) 
  $volatile IMD3 := ( $mux (s_in [] 3 ) IMC7  IMC6 ) 
  $volatile IMD4 := ( $mux (s_in [] 3 ) IMC9  IMC8 ) 
  $volatile IMD5 := ( $mux (s_in [] 3 ) IMC11  IMC10 ) 
  $volatile IMD6 := ( $mux (s_in [] 3 ) IMC13  IMC12 ) 
  $volatile IMD7 := ( $mux (s_in [] 3 ) IMC15  IMC14 ) 
  $volatile IMD8 := ( $mux (s_in [] 3 ) IMC17  IMC16 ) 
  $volatile IMD9 := ( $mux (s_in [] 3 ) IMC19  IMC18 ) 
  $volatile IMD10 := ( $mux (s_in [] 3 ) IMC21  IMC20 ) 
  $volatile IMD11 := ( $mux (s_in [] 3 ) IMC23  IMC22 ) 
  $volatile IMD12 := ( $mux (s_in [] 3 ) IMC25  IMC24 ) 
  $volatile IMD13 := ( $mux (s_in [] 3 ) IMC27  IMC26 ) 
  $volatile IMD14 := ( $mux (s_in [] 3 ) IMC29  IMC28 ) 
  $volatile IMD15 := ( $mux (s_in [] 3 ) IMC31  IMC30 ) 
  $volatile IME0 := ( $mux (s_in [] 4 ) IMD1  IMD0 ) 
  $volatile IME1 := ( $mux (s_in [] 4 ) IMD3  IMD2 ) 
  $volatile IME2 := ( $mux (s_in [] 4 ) IMD5  IMD4 ) 
  $volatile IME3 := ( $mux (s_in [] 4 ) IMD7  IMD6 ) 
  $volatile IME4 := ( $mux (s_in [] 4 ) IMD9  IMD8 ) 
  $volatile IME5 := ( $mux (s_in [] 4 ) IMD11  IMD10 ) 
  $volatile IME6 := ( $mux (s_in [] 4 ) IMD13  IMD12 ) 
  $volatile IME7 := ( $mux (s_in [] 4 ) IMD15  IMD14 ) 
  $volatile IMF0 := ( $mux (s_in [] 5 ) IME1  IME0 ) 
  $volatile IMF1 := ( $mux (s_in [] 5 ) IME3  IME2 ) 
  $volatile IMF2 := ( $mux (s_in [] 5 ) IME5  IME4 ) 
  $volatile IMF3 := ( $mux (s_in [] 5 ) IME7  IME6 ) 
  $volatile IMG0 := ( $mux (s_in [] 6 ) IMF1  IMF0 ) 
  $volatile IMG1 := ( $mux (s_in [] 6 ) IMF3  IMF2 ) 
  s_out := ( $mux (s_in [] 7 ) IMG1  IMG0 ) 
}
$volatile $module [Inv_Sbox_3]
$in ( s_in : $uint<8>  )
$out ( s_out : $uint<8>  )
$is
{
  $volatile IMA0 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 9  )  ($bitcast ($uint<8>) 82  ) ) 
  $volatile IMA1 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 213  )  ($bitcast ($uint<8>) 106  ) ) 
  $volatile IMA2 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 54  )  ($bitcast ($uint<8>) 48  ) ) 
  $volatile IMA3 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 56  )  ($bitcast ($uint<8>) 165  ) ) 
  $volatile IMA4 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 64  )  ($bitcast ($uint<8>) 191  ) ) 
  $volatile IMA5 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 158  )  ($bitcast ($uint<8>) 163  ) ) 
  $volatile IMA6 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 243  )  ($bitcast ($uint<8>) 129  ) ) 
  $volatile IMA7 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 251  )  ($bitcast ($uint<8>) 215  ) ) 
  $volatile IMA8 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 227  )  ($bitcast ($uint<8>) 124  ) ) 
  $volatile IMA9 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 130  )  ($bitcast ($uint<8>) 57  ) ) 
  $volatile IMA10 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 47  )  ($bitcast ($uint<8>) 155  ) ) 
  $volatile IMA11 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 135  )  ($bitcast ($uint<8>) 255  ) ) 
  $volatile IMA12 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 142  )  ($bitcast ($uint<8>) 52  ) ) 
  $volatile IMA13 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 68  )  ($bitcast ($uint<8>) 67  ) ) 
  $volatile IMA14 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 222  )  ($bitcast ($uint<8>) 196  ) ) 
  $volatile IMA15 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 203  )  ($bitcast ($uint<8>) 233  ) ) 
  $volatile IMA16 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 123  )  ($bitcast ($uint<8>) 84  ) ) 
  $volatile IMA17 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 50  )  ($bitcast ($uint<8>) 148  ) ) 
  $volatile IMA18 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 194  )  ($bitcast ($uint<8>) 166  ) ) 
  $volatile IMA19 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 61  )  ($bitcast ($uint<8>) 35  ) ) 
  $volatile IMA20 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 76  )  ($bitcast ($uint<8>) 238  ) ) 
  $volatile IMA21 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 11  )  ($bitcast ($uint<8>) 149  ) ) 
  $volatile IMA22 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 250  )  ($bitcast ($uint<8>) 66  ) ) 
  $volatile IMA23 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 78  )  ($bitcast ($uint<8>) 195  ) ) 
  $volatile IMA24 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 46  )  ($bitcast ($uint<8>) 8  ) ) 
  $volatile IMA25 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 102  )  ($bitcast ($uint<8>) 161  ) ) 
  $volatile IMA26 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 217  )  ($bitcast ($uint<8>) 40  ) ) 
  $volatile IMA27 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 178  )  ($bitcast ($uint<8>) 36  ) ) 
  $volatile IMA28 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 91  )  ($bitcast ($uint<8>) 118  ) ) 
  $volatile IMA29 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 73  )  ($bitcast ($uint<8>) 162  ) ) 
  $volatile IMA30 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 139  )  ($bitcast ($uint<8>) 109  ) ) 
  $volatile IMA31 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 37  )  ($bitcast ($uint<8>) 209  ) ) 
  $volatile IMA32 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 248  )  ($bitcast ($uint<8>) 114  ) ) 
  $volatile IMA33 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 100  )  ($bitcast ($uint<8>) 246  ) ) 
  $volatile IMA34 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 104  )  ($bitcast ($uint<8>) 134  ) ) 
  $volatile IMA35 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 22  )  ($bitcast ($uint<8>) 152  ) ) 
  $volatile IMA36 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 164  )  ($bitcast ($uint<8>) 212  ) ) 
  $volatile IMA37 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 204  )  ($bitcast ($uint<8>) 92  ) ) 
  $volatile IMA38 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 101  )  ($bitcast ($uint<8>) 93  ) ) 
  $volatile IMA39 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 146  )  ($bitcast ($uint<8>) 182  ) ) 
  $volatile IMA40 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 112  )  ($bitcast ($uint<8>) 108  ) ) 
  $volatile IMA41 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 80  )  ($bitcast ($uint<8>) 72  ) ) 
  $volatile IMA42 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 237  )  ($bitcast ($uint<8>) 253  ) ) 
  $volatile IMA43 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 218  )  ($bitcast ($uint<8>) 185  ) ) 
  $volatile IMA44 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 21  )  ($bitcast ($uint<8>) 94  ) ) 
  $volatile IMA45 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 87  )  ($bitcast ($uint<8>) 70  ) ) 
  $volatile IMA46 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 141  )  ($bitcast ($uint<8>) 167  ) ) 
  $volatile IMA47 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 132  )  ($bitcast ($uint<8>) 157  ) ) 
  $volatile IMA48 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 216  )  ($bitcast ($uint<8>) 144  ) ) 
  $volatile IMA49 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 0  )  ($bitcast ($uint<8>) 171  ) ) 
  $volatile IMA50 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 188  )  ($bitcast ($uint<8>) 140  ) ) 
  $volatile IMA51 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 10  )  ($bitcast ($uint<8>) 211  ) ) 
  $volatile IMA52 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 228  )  ($bitcast ($uint<8>) 247  ) ) 
  $volatile IMA53 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 5  )  ($bitcast ($uint<8>) 88  ) ) 
  $volatile IMA54 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 179  )  ($bitcast ($uint<8>) 184  ) ) 
  $volatile IMA55 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 6  )  ($bitcast ($uint<8>) 69  ) ) 
  $volatile IMA56 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 44  )  ($bitcast ($uint<8>) 208  ) ) 
  $volatile IMA57 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 143  )  ($bitcast ($uint<8>) 30  ) ) 
  $volatile IMA58 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 63  )  ($bitcast ($uint<8>) 202  ) ) 
  $volatile IMA59 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 2  )  ($bitcast ($uint<8>) 15  ) ) 
  $volatile IMA60 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 175  )  ($bitcast ($uint<8>) 193  ) ) 
  $volatile IMA61 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 3  )  ($bitcast ($uint<8>) 189  ) ) 
  $volatile IMA62 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 19  )  ($bitcast ($uint<8>) 1  ) ) 
  $volatile IMA63 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 107  )  ($bitcast ($uint<8>) 138  ) ) 
  $volatile IMA64 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 145  )  ($bitcast ($uint<8>) 58  ) ) 
  $volatile IMA65 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 65  )  ($bitcast ($uint<8>) 17  ) ) 
  $volatile IMA66 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 103  )  ($bitcast ($uint<8>) 79  ) ) 
  $volatile IMA67 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 234  )  ($bitcast ($uint<8>) 220  ) ) 
  $volatile IMA68 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 242  )  ($bitcast ($uint<8>) 151  ) ) 
  $volatile IMA69 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 206  )  ($bitcast ($uint<8>) 207  ) ) 
  $volatile IMA70 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 180  )  ($bitcast ($uint<8>) 240  ) ) 
  $volatile IMA71 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 115  )  ($bitcast ($uint<8>) 230  ) ) 
  $volatile IMA72 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 172  )  ($bitcast ($uint<8>) 150  ) ) 
  $volatile IMA73 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 34  )  ($bitcast ($uint<8>) 116  ) ) 
  $volatile IMA74 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 173  )  ($bitcast ($uint<8>) 231  ) ) 
  $volatile IMA75 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 133  )  ($bitcast ($uint<8>) 53  ) ) 
  $volatile IMA76 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 249  )  ($bitcast ($uint<8>) 226  ) ) 
  $volatile IMA77 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 232  )  ($bitcast ($uint<8>) 55  ) ) 
  $volatile IMA78 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 117  )  ($bitcast ($uint<8>) 28  ) ) 
  $volatile IMA79 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 110  )  ($bitcast ($uint<8>) 223  ) ) 
  $volatile IMA80 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 241  )  ($bitcast ($uint<8>) 71  ) ) 
  $volatile IMA81 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 113  )  ($bitcast ($uint<8>) 26  ) ) 
  $volatile IMA82 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 41  )  ($bitcast ($uint<8>) 29  ) ) 
  $volatile IMA83 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 137  )  ($bitcast ($uint<8>) 197  ) ) 
  $volatile IMA84 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 183  )  ($bitcast ($uint<8>) 111  ) ) 
  $volatile IMA85 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 14  )  ($bitcast ($uint<8>) 98  ) ) 
  $volatile IMA86 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 24  )  ($bitcast ($uint<8>) 170  ) ) 
  $volatile IMA87 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 27  )  ($bitcast ($uint<8>) 190  ) ) 
  $volatile IMA88 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 86  )  ($bitcast ($uint<8>) 252  ) ) 
  $volatile IMA89 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 75  )  ($bitcast ($uint<8>) 62  ) ) 
  $volatile IMA90 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 210  )  ($bitcast ($uint<8>) 198  ) ) 
  $volatile IMA91 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 32  )  ($bitcast ($uint<8>) 121  ) ) 
  $volatile IMA92 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 219  )  ($bitcast ($uint<8>) 154  ) ) 
  $volatile IMA93 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 254  )  ($bitcast ($uint<8>) 192  ) ) 
  $volatile IMA94 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 205  )  ($bitcast ($uint<8>) 120  ) ) 
  $volatile IMA95 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 244  )  ($bitcast ($uint<8>) 90  ) ) 
  $volatile IMA96 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 221  )  ($bitcast ($uint<8>) 31  ) ) 
  $volatile IMA97 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 51  )  ($bitcast ($uint<8>) 168  ) ) 
  $volatile IMA98 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 7  )  ($bitcast ($uint<8>) 136  ) ) 
  $volatile IMA99 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 49  )  ($bitcast ($uint<8>) 199  ) ) 
  $volatile IMA100 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 18  )  ($bitcast ($uint<8>) 177  ) ) 
  $volatile IMA101 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 89  )  ($bitcast ($uint<8>) 16  ) ) 
  $volatile IMA102 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 128  )  ($bitcast ($uint<8>) 39  ) ) 
  $volatile IMA103 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 95  )  ($bitcast ($uint<8>) 236  ) ) 
  $volatile IMA104 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 81  )  ($bitcast ($uint<8>) 96  ) ) 
  $volatile IMA105 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 169  )  ($bitcast ($uint<8>) 127  ) ) 
  $volatile IMA106 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 181  )  ($bitcast ($uint<8>) 25  ) ) 
  $volatile IMA107 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 13  )  ($bitcast ($uint<8>) 74  ) ) 
  $volatile IMA108 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 229  )  ($bitcast ($uint<8>) 45  ) ) 
  $volatile IMA109 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 159  )  ($bitcast ($uint<8>) 122  ) ) 
  $volatile IMA110 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 201  )  ($bitcast ($uint<8>) 147  ) ) 
  $volatile IMA111 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 239  )  ($bitcast ($uint<8>) 156  ) ) 
  $volatile IMA112 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 224  )  ($bitcast ($uint<8>) 160  ) ) 
  $volatile IMA113 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 77  )  ($bitcast ($uint<8>) 59  ) ) 
  $volatile IMA114 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 42  )  ($bitcast ($uint<8>) 174  ) ) 
  $volatile IMA115 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 176  )  ($bitcast ($uint<8>) 245  ) ) 
  $volatile IMA116 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 235  )  ($bitcast ($uint<8>) 200  ) ) 
  $volatile IMA117 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 60  )  ($bitcast ($uint<8>) 187  ) ) 
  $volatile IMA118 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 83  )  ($bitcast ($uint<8>) 131  ) ) 
  $volatile IMA119 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 97  )  ($bitcast ($uint<8>) 153  ) ) 
  $volatile IMA120 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 43  )  ($bitcast ($uint<8>) 23  ) ) 
  $volatile IMA121 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 126  )  ($bitcast ($uint<8>) 4  ) ) 
  $volatile IMA122 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 119  )  ($bitcast ($uint<8>) 186  ) ) 
  $volatile IMA123 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 38  )  ($bitcast ($uint<8>) 214  ) ) 
  $volatile IMA124 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 105  )  ($bitcast ($uint<8>) 225  ) ) 
  $volatile IMA125 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 99  )  ($bitcast ($uint<8>) 20  ) ) 
  $volatile IMA126 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 33  )  ($bitcast ($uint<8>) 85  ) ) 
  $volatile IMA127 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 125  )  ($bitcast ($uint<8>) 12  ) ) 
  $volatile IMB0 := ( $mux (s_in [] 1 ) IMA1  IMA0 ) 
  $volatile IMB1 := ( $mux (s_in [] 1 ) IMA3  IMA2 ) 
  $volatile IMB2 := ( $mux (s_in [] 1 ) IMA5  IMA4 ) 
  $volatile IMB3 := ( $mux (s_in [] 1 ) IMA7  IMA6 ) 
  $volatile IMB4 := ( $mux (s_in [] 1 ) IMA9  IMA8 ) 
  $volatile IMB5 := ( $mux (s_in [] 1 ) IMA11  IMA10 ) 
  $volatile IMB6 := ( $mux (s_in [] 1 ) IMA13  IMA12 ) 
  $volatile IMB7 := ( $mux (s_in [] 1 ) IMA15  IMA14 ) 
  $volatile IMB8 := ( $mux (s_in [] 1 ) IMA17  IMA16 ) 
  $volatile IMB9 := ( $mux (s_in [] 1 ) IMA19  IMA18 ) 
  $volatile IMB10 := ( $mux (s_in [] 1 ) IMA21  IMA20 ) 
  $volatile IMB11 := ( $mux (s_in [] 1 ) IMA23  IMA22 ) 
  $volatile IMB12 := ( $mux (s_in [] 1 ) IMA25  IMA24 ) 
  $volatile IMB13 := ( $mux (s_in [] 1 ) IMA27  IMA26 ) 
  $volatile IMB14 := ( $mux (s_in [] 1 ) IMA29  IMA28 ) 
  $volatile IMB15 := ( $mux (s_in [] 1 ) IMA31  IMA30 ) 
  $volatile IMB16 := ( $mux (s_in [] 1 ) IMA33  IMA32 ) 
  $volatile IMB17 := ( $mux (s_in [] 1 ) IMA35  IMA34 ) 
  $volatile IMB18 := ( $mux (s_in [] 1 ) IMA37  IMA36 ) 
  $volatile IMB19 := ( $mux (s_in [] 1 ) IMA39  IMA38 ) 
  $volatile IMB20 := ( $mux (s_in [] 1 ) IMA41  IMA40 ) 
  $volatile IMB21 := ( $mux (s_in [] 1 ) IMA43  IMA42 ) 
  $volatile IMB22 := ( $mux (s_in [] 1 ) IMA45  IMA44 ) 
  $volatile IMB23 := ( $mux (s_in [] 1 ) IMA47  IMA46 ) 
  $volatile IMB24 := ( $mux (s_in [] 1 ) IMA49  IMA48 ) 
  $volatile IMB25 := ( $mux (s_in [] 1 ) IMA51  IMA50 ) 
  $volatile IMB26 := ( $mux (s_in [] 1 ) IMA53  IMA52 ) 
  $volatile IMB27 := ( $mux (s_in [] 1 ) IMA55  IMA54 ) 
  $volatile IMB28 := ( $mux (s_in [] 1 ) IMA57  IMA56 ) 
  $volatile IMB29 := ( $mux (s_in [] 1 ) IMA59  IMA58 ) 
  $volatile IMB30 := ( $mux (s_in [] 1 ) IMA61  IMA60 ) 
  $volatile IMB31 := ( $mux (s_in [] 1 ) IMA63  IMA62 ) 
  $volatile IMB32 := ( $mux (s_in [] 1 ) IMA65  IMA64 ) 
  $volatile IMB33 := ( $mux (s_in [] 1 ) IMA67  IMA66 ) 
  $volatile IMB34 := ( $mux (s_in [] 1 ) IMA69  IMA68 ) 
  $volatile IMB35 := ( $mux (s_in [] 1 ) IMA71  IMA70 ) 
  $volatile IMB36 := ( $mux (s_in [] 1 ) IMA73  IMA72 ) 
  $volatile IMB37 := ( $mux (s_in [] 1 ) IMA75  IMA74 ) 
  $volatile IMB38 := ( $mux (s_in [] 1 ) IMA77  IMA76 ) 
  $volatile IMB39 := ( $mux (s_in [] 1 ) IMA79  IMA78 ) 
  $volatile IMB40 := ( $mux (s_in [] 1 ) IMA81  IMA80 ) 
  $volatile IMB41 := ( $mux (s_in [] 1 ) IMA83  IMA82 ) 
  $volatile IMB42 := ( $mux (s_in [] 1 ) IMA85  IMA84 ) 
  $volatile IMB43 := ( $mux (s_in [] 1 ) IMA87  IMA86 ) 
  $volatile IMB44 := ( $mux (s_in [] 1 ) IMA89  IMA88 ) 
  $volatile IMB45 := ( $mux (s_in [] 1 ) IMA91  IMA90 ) 
  $volatile IMB46 := ( $mux (s_in [] 1 ) IMA93  IMA92 ) 
  $volatile IMB47 := ( $mux (s_in [] 1 ) IMA95  IMA94 ) 
  $volatile IMB48 := ( $mux (s_in [] 1 ) IMA97  IMA96 ) 
  $volatile IMB49 := ( $mux (s_in [] 1 ) IMA99  IMA98 ) 
  $volatile IMB50 := ( $mux (s_in [] 1 ) IMA101  IMA100 ) 
  $volatile IMB51 := ( $mux (s_in [] 1 ) IMA103  IMA102 ) 
  $volatile IMB52 := ( $mux (s_in [] 1 ) IMA105  IMA104 ) 
  $volatile IMB53 := ( $mux (s_in [] 1 ) IMA107  IMA106 ) 
  $volatile IMB54 := ( $mux (s_in [] 1 ) IMA109  IMA108 ) 
  $volatile IMB55 := ( $mux (s_in [] 1 ) IMA111  IMA110 ) 
  $volatile IMB56 := ( $mux (s_in [] 1 ) IMA113  IMA112 ) 
  $volatile IMB57 := ( $mux (s_in [] 1 ) IMA115  IMA114 ) 
  $volatile IMB58 := ( $mux (s_in [] 1 ) IMA117  IMA116 ) 
  $volatile IMB59 := ( $mux (s_in [] 1 ) IMA119  IMA118 ) 
  $volatile IMB60 := ( $mux (s_in [] 1 ) IMA121  IMA120 ) 
  $volatile IMB61 := ( $mux (s_in [] 1 ) IMA123  IMA122 ) 
  $volatile IMB62 := ( $mux (s_in [] 1 ) IMA125  IMA124 ) 
  $volatile IMB63 := ( $mux (s_in [] 1 ) IMA127  IMA126 ) 
  $volatile IMC0 := ( $mux (s_in [] 2 ) IMB1  IMB0 ) 
  $volatile IMC1 := ( $mux (s_in [] 2 ) IMB3  IMB2 ) 
  $volatile IMC2 := ( $mux (s_in [] 2 ) IMB5  IMB4 ) 
  $volatile IMC3 := ( $mux (s_in [] 2 ) IMB7  IMB6 ) 
  $volatile IMC4 := ( $mux (s_in [] 2 ) IMB9  IMB8 ) 
  $volatile IMC5 := ( $mux (s_in [] 2 ) IMB11  IMB10 ) 
  $volatile IMC6 := ( $mux (s_in [] 2 ) IMB13  IMB12 ) 
  $volatile IMC7 := ( $mux (s_in [] 2 ) IMB15  IMB14 ) 
  $volatile IMC8 := ( $mux (s_in [] 2 ) IMB17  IMB16 ) 
  $volatile IMC9 := ( $mux (s_in [] 2 ) IMB19  IMB18 ) 
  $volatile IMC10 := ( $mux (s_in [] 2 ) IMB21  IMB20 ) 
  $volatile IMC11 := ( $mux (s_in [] 2 ) IMB23  IMB22 ) 
  $volatile IMC12 := ( $mux (s_in [] 2 ) IMB25  IMB24 ) 
  $volatile IMC13 := ( $mux (s_in [] 2 ) IMB27  IMB26 ) 
  $volatile IMC14 := ( $mux (s_in [] 2 ) IMB29  IMB28 ) 
  $volatile IMC15 := ( $mux (s_in [] 2 ) IMB31  IMB30 ) 
  $volatile IMC16 := ( $mux (s_in [] 2 ) IMB33  IMB32 ) 
  $volatile IMC17 := ( $mux (s_in [] 2 ) IMB35  IMB34 ) 
  $volatile IMC18 := ( $mux (s_in [] 2 ) IMB37  IMB36 ) 
  $volatile IMC19 := ( $mux (s_in [] 2 ) IMB39  IMB38 ) 
  $volatile IMC20 := ( $mux (s_in [] 2 ) IMB41  IMB40 ) 
  $volatile IMC21 := ( $mux (s_in [] 2 ) IMB43  IMB42 ) 
  $volatile IMC22 := ( $mux (s_in [] 2 ) IMB45  IMB44 ) 
  $volatile IMC23 := ( $mux (s_in [] 2 ) IMB47  IMB46 ) 
  $volatile IMC24 := ( $mux (s_in [] 2 ) IMB49  IMB48 ) 
  $volatile IMC25 := ( $mux (s_in [] 2 ) IMB51  IMB50 ) 
  $volatile IMC26 := ( $mux (s_in [] 2 ) IMB53  IMB52 ) 
  $volatile IMC27 := ( $mux (s_in [] 2 ) IMB55  IMB54 ) 
  $volatile IMC28 := ( $mux (s_in [] 2 ) IMB57  IMB56 ) 
  $volatile IMC29 := ( $mux (s_in [] 2 ) IMB59  IMB58 ) 
  $volatile IMC30 := ( $mux (s_in [] 2 ) IMB61  IMB60 ) 
  $volatile IMC31 := ( $mux (s_in [] 2 ) IMB63  IMB62 ) 
  $volatile IMD0 := ( $mux (s_in [] 3 ) IMC1  IMC0 ) 
  $volatile IMD1 := ( $mux (s_in [] 3 ) IMC3  IMC2 ) 
  $volatile IMD2 := ( $mux (s_in [] 3 ) IMC5  IMC4 ) 
  $volatile IMD3 := ( $mux (s_in [] 3 ) IMC7  IMC6 ) 
  $volatile IMD4 := ( $mux (s_in [] 3 ) IMC9  IMC8 ) 
  $volatile IMD5 := ( $mux (s_in [] 3 ) IMC11  IMC10 ) 
  $volatile IMD6 := ( $mux (s_in [] 3 ) IMC13  IMC12 ) 
  $volatile IMD7 := ( $mux (s_in [] 3 ) IMC15  IMC14 ) 
  $volatile IMD8 := ( $mux (s_in [] 3 ) IMC17  IMC16 ) 
  $volatile IMD9 := ( $mux (s_in [] 3 ) IMC19  IMC18 ) 
  $volatile IMD10 := ( $mux (s_in [] 3 ) IMC21  IMC20 ) 
  $volatile IMD11 := ( $mux (s_in [] 3 ) IMC23  IMC22 ) 
  $volatile IMD12 := ( $mux (s_in [] 3 ) IMC25  IMC24 ) 
  $volatile IMD13 := ( $mux (s_in [] 3 ) IMC27  IMC26 ) 
  $volatile IMD14 := ( $mux (s_in [] 3 ) IMC29  IMC28 ) 
  $volatile IMD15 := ( $mux (s_in [] 3 ) IMC31  IMC30 ) 
  $volatile IME0 := ( $mux (s_in [] 4 ) IMD1  IMD0 ) 
  $volatile IME1 := ( $mux (s_in [] 4 ) IMD3  IMD2 ) 
  $volatile IME2 := ( $mux (s_in [] 4 ) IMD5  IMD4 ) 
  $volatile IME3 := ( $mux (s_in [] 4 ) IMD7  IMD6 ) 
  $volatile IME4 := ( $mux (s_in [] 4 ) IMD9  IMD8 ) 
  $volatile IME5 := ( $mux (s_in [] 4 ) IMD11  IMD10 ) 
  $volatile IME6 := ( $mux (s_in [] 4 ) IMD13  IMD12 ) 
  $volatile IME7 := ( $mux (s_in [] 4 ) IMD15  IMD14 ) 
  $volatile IMF0 := ( $mux (s_in [] 5 ) IME1  IME0 ) 
  $volatile IMF1 := ( $mux (s_in [] 5 ) IME3  IME2 ) 
  $volatile IMF2 := ( $mux (s_in [] 5 ) IME5  IME4 ) 
  $volatile IMF3 := ( $mux (s_in [] 5 ) IME7  IME6 ) 
  $volatile IMG0 := ( $mux (s_in [] 6 ) IMF1  IMF0 ) 
  $volatile IMG1 := ( $mux (s_in [] 6 ) IMF3  IMF2 ) 
  s_out := ( $mux (s_in [] 7 ) IMG1  IMG0 ) 
}
$volatile $module [Inv_Sbox_4]
$in ( s_in : $uint<8>  )
$out ( s_out : $uint<8>  )
$is
{
  $volatile IMA0 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 9  )  ($bitcast ($uint<8>) 82  ) ) 
  $volatile IMA1 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 213  )  ($bitcast ($uint<8>) 106  ) ) 
  $volatile IMA2 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 54  )  ($bitcast ($uint<8>) 48  ) ) 
  $volatile IMA3 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 56  )  ($bitcast ($uint<8>) 165  ) ) 
  $volatile IMA4 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 64  )  ($bitcast ($uint<8>) 191  ) ) 
  $volatile IMA5 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 158  )  ($bitcast ($uint<8>) 163  ) ) 
  $volatile IMA6 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 243  )  ($bitcast ($uint<8>) 129  ) ) 
  $volatile IMA7 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 251  )  ($bitcast ($uint<8>) 215  ) ) 
  $volatile IMA8 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 227  )  ($bitcast ($uint<8>) 124  ) ) 
  $volatile IMA9 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 130  )  ($bitcast ($uint<8>) 57  ) ) 
  $volatile IMA10 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 47  )  ($bitcast ($uint<8>) 155  ) ) 
  $volatile IMA11 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 135  )  ($bitcast ($uint<8>) 255  ) ) 
  $volatile IMA12 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 142  )  ($bitcast ($uint<8>) 52  ) ) 
  $volatile IMA13 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 68  )  ($bitcast ($uint<8>) 67  ) ) 
  $volatile IMA14 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 222  )  ($bitcast ($uint<8>) 196  ) ) 
  $volatile IMA15 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 203  )  ($bitcast ($uint<8>) 233  ) ) 
  $volatile IMA16 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 123  )  ($bitcast ($uint<8>) 84  ) ) 
  $volatile IMA17 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 50  )  ($bitcast ($uint<8>) 148  ) ) 
  $volatile IMA18 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 194  )  ($bitcast ($uint<8>) 166  ) ) 
  $volatile IMA19 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 61  )  ($bitcast ($uint<8>) 35  ) ) 
  $volatile IMA20 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 76  )  ($bitcast ($uint<8>) 238  ) ) 
  $volatile IMA21 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 11  )  ($bitcast ($uint<8>) 149  ) ) 
  $volatile IMA22 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 250  )  ($bitcast ($uint<8>) 66  ) ) 
  $volatile IMA23 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 78  )  ($bitcast ($uint<8>) 195  ) ) 
  $volatile IMA24 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 46  )  ($bitcast ($uint<8>) 8  ) ) 
  $volatile IMA25 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 102  )  ($bitcast ($uint<8>) 161  ) ) 
  $volatile IMA26 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 217  )  ($bitcast ($uint<8>) 40  ) ) 
  $volatile IMA27 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 178  )  ($bitcast ($uint<8>) 36  ) ) 
  $volatile IMA28 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 91  )  ($bitcast ($uint<8>) 118  ) ) 
  $volatile IMA29 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 73  )  ($bitcast ($uint<8>) 162  ) ) 
  $volatile IMA30 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 139  )  ($bitcast ($uint<8>) 109  ) ) 
  $volatile IMA31 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 37  )  ($bitcast ($uint<8>) 209  ) ) 
  $volatile IMA32 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 248  )  ($bitcast ($uint<8>) 114  ) ) 
  $volatile IMA33 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 100  )  ($bitcast ($uint<8>) 246  ) ) 
  $volatile IMA34 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 104  )  ($bitcast ($uint<8>) 134  ) ) 
  $volatile IMA35 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 22  )  ($bitcast ($uint<8>) 152  ) ) 
  $volatile IMA36 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 164  )  ($bitcast ($uint<8>) 212  ) ) 
  $volatile IMA37 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 204  )  ($bitcast ($uint<8>) 92  ) ) 
  $volatile IMA38 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 101  )  ($bitcast ($uint<8>) 93  ) ) 
  $volatile IMA39 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 146  )  ($bitcast ($uint<8>) 182  ) ) 
  $volatile IMA40 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 112  )  ($bitcast ($uint<8>) 108  ) ) 
  $volatile IMA41 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 80  )  ($bitcast ($uint<8>) 72  ) ) 
  $volatile IMA42 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 237  )  ($bitcast ($uint<8>) 253  ) ) 
  $volatile IMA43 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 218  )  ($bitcast ($uint<8>) 185  ) ) 
  $volatile IMA44 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 21  )  ($bitcast ($uint<8>) 94  ) ) 
  $volatile IMA45 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 87  )  ($bitcast ($uint<8>) 70  ) ) 
  $volatile IMA46 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 141  )  ($bitcast ($uint<8>) 167  ) ) 
  $volatile IMA47 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 132  )  ($bitcast ($uint<8>) 157  ) ) 
  $volatile IMA48 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 216  )  ($bitcast ($uint<8>) 144  ) ) 
  $volatile IMA49 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 0  )  ($bitcast ($uint<8>) 171  ) ) 
  $volatile IMA50 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 188  )  ($bitcast ($uint<8>) 140  ) ) 
  $volatile IMA51 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 10  )  ($bitcast ($uint<8>) 211  ) ) 
  $volatile IMA52 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 228  )  ($bitcast ($uint<8>) 247  ) ) 
  $volatile IMA53 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 5  )  ($bitcast ($uint<8>) 88  ) ) 
  $volatile IMA54 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 179  )  ($bitcast ($uint<8>) 184  ) ) 
  $volatile IMA55 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 6  )  ($bitcast ($uint<8>) 69  ) ) 
  $volatile IMA56 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 44  )  ($bitcast ($uint<8>) 208  ) ) 
  $volatile IMA57 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 143  )  ($bitcast ($uint<8>) 30  ) ) 
  $volatile IMA58 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 63  )  ($bitcast ($uint<8>) 202  ) ) 
  $volatile IMA59 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 2  )  ($bitcast ($uint<8>) 15  ) ) 
  $volatile IMA60 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 175  )  ($bitcast ($uint<8>) 193  ) ) 
  $volatile IMA61 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 3  )  ($bitcast ($uint<8>) 189  ) ) 
  $volatile IMA62 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 19  )  ($bitcast ($uint<8>) 1  ) ) 
  $volatile IMA63 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 107  )  ($bitcast ($uint<8>) 138  ) ) 
  $volatile IMA64 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 145  )  ($bitcast ($uint<8>) 58  ) ) 
  $volatile IMA65 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 65  )  ($bitcast ($uint<8>) 17  ) ) 
  $volatile IMA66 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 103  )  ($bitcast ($uint<8>) 79  ) ) 
  $volatile IMA67 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 234  )  ($bitcast ($uint<8>) 220  ) ) 
  $volatile IMA68 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 242  )  ($bitcast ($uint<8>) 151  ) ) 
  $volatile IMA69 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 206  )  ($bitcast ($uint<8>) 207  ) ) 
  $volatile IMA70 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 180  )  ($bitcast ($uint<8>) 240  ) ) 
  $volatile IMA71 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 115  )  ($bitcast ($uint<8>) 230  ) ) 
  $volatile IMA72 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 172  )  ($bitcast ($uint<8>) 150  ) ) 
  $volatile IMA73 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 34  )  ($bitcast ($uint<8>) 116  ) ) 
  $volatile IMA74 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 173  )  ($bitcast ($uint<8>) 231  ) ) 
  $volatile IMA75 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 133  )  ($bitcast ($uint<8>) 53  ) ) 
  $volatile IMA76 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 249  )  ($bitcast ($uint<8>) 226  ) ) 
  $volatile IMA77 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 232  )  ($bitcast ($uint<8>) 55  ) ) 
  $volatile IMA78 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 117  )  ($bitcast ($uint<8>) 28  ) ) 
  $volatile IMA79 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 110  )  ($bitcast ($uint<8>) 223  ) ) 
  $volatile IMA80 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 241  )  ($bitcast ($uint<8>) 71  ) ) 
  $volatile IMA81 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 113  )  ($bitcast ($uint<8>) 26  ) ) 
  $volatile IMA82 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 41  )  ($bitcast ($uint<8>) 29  ) ) 
  $volatile IMA83 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 137  )  ($bitcast ($uint<8>) 197  ) ) 
  $volatile IMA84 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 183  )  ($bitcast ($uint<8>) 111  ) ) 
  $volatile IMA85 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 14  )  ($bitcast ($uint<8>) 98  ) ) 
  $volatile IMA86 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 24  )  ($bitcast ($uint<8>) 170  ) ) 
  $volatile IMA87 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 27  )  ($bitcast ($uint<8>) 190  ) ) 
  $volatile IMA88 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 86  )  ($bitcast ($uint<8>) 252  ) ) 
  $volatile IMA89 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 75  )  ($bitcast ($uint<8>) 62  ) ) 
  $volatile IMA90 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 210  )  ($bitcast ($uint<8>) 198  ) ) 
  $volatile IMA91 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 32  )  ($bitcast ($uint<8>) 121  ) ) 
  $volatile IMA92 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 219  )  ($bitcast ($uint<8>) 154  ) ) 
  $volatile IMA93 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 254  )  ($bitcast ($uint<8>) 192  ) ) 
  $volatile IMA94 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 205  )  ($bitcast ($uint<8>) 120  ) ) 
  $volatile IMA95 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 244  )  ($bitcast ($uint<8>) 90  ) ) 
  $volatile IMA96 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 221  )  ($bitcast ($uint<8>) 31  ) ) 
  $volatile IMA97 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 51  )  ($bitcast ($uint<8>) 168  ) ) 
  $volatile IMA98 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 7  )  ($bitcast ($uint<8>) 136  ) ) 
  $volatile IMA99 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 49  )  ($bitcast ($uint<8>) 199  ) ) 
  $volatile IMA100 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 18  )  ($bitcast ($uint<8>) 177  ) ) 
  $volatile IMA101 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 89  )  ($bitcast ($uint<8>) 16  ) ) 
  $volatile IMA102 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 128  )  ($bitcast ($uint<8>) 39  ) ) 
  $volatile IMA103 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 95  )  ($bitcast ($uint<8>) 236  ) ) 
  $volatile IMA104 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 81  )  ($bitcast ($uint<8>) 96  ) ) 
  $volatile IMA105 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 169  )  ($bitcast ($uint<8>) 127  ) ) 
  $volatile IMA106 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 181  )  ($bitcast ($uint<8>) 25  ) ) 
  $volatile IMA107 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 13  )  ($bitcast ($uint<8>) 74  ) ) 
  $volatile IMA108 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 229  )  ($bitcast ($uint<8>) 45  ) ) 
  $volatile IMA109 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 159  )  ($bitcast ($uint<8>) 122  ) ) 
  $volatile IMA110 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 201  )  ($bitcast ($uint<8>) 147  ) ) 
  $volatile IMA111 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 239  )  ($bitcast ($uint<8>) 156  ) ) 
  $volatile IMA112 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 224  )  ($bitcast ($uint<8>) 160  ) ) 
  $volatile IMA113 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 77  )  ($bitcast ($uint<8>) 59  ) ) 
  $volatile IMA114 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 42  )  ($bitcast ($uint<8>) 174  ) ) 
  $volatile IMA115 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 176  )  ($bitcast ($uint<8>) 245  ) ) 
  $volatile IMA116 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 235  )  ($bitcast ($uint<8>) 200  ) ) 
  $volatile IMA117 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 60  )  ($bitcast ($uint<8>) 187  ) ) 
  $volatile IMA118 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 83  )  ($bitcast ($uint<8>) 131  ) ) 
  $volatile IMA119 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 97  )  ($bitcast ($uint<8>) 153  ) ) 
  $volatile IMA120 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 43  )  ($bitcast ($uint<8>) 23  ) ) 
  $volatile IMA121 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 126  )  ($bitcast ($uint<8>) 4  ) ) 
  $volatile IMA122 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 119  )  ($bitcast ($uint<8>) 186  ) ) 
  $volatile IMA123 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 38  )  ($bitcast ($uint<8>) 214  ) ) 
  $volatile IMA124 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 105  )  ($bitcast ($uint<8>) 225  ) ) 
  $volatile IMA125 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 99  )  ($bitcast ($uint<8>) 20  ) ) 
  $volatile IMA126 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 33  )  ($bitcast ($uint<8>) 85  ) ) 
  $volatile IMA127 := ( $mux (s_in [] 0 ) ($bitcast ($uint<8>) 125  )  ($bitcast ($uint<8>) 12  ) ) 
  $volatile IMB0 := ( $mux (s_in [] 1 ) IMA1  IMA0 ) 
  $volatile IMB1 := ( $mux (s_in [] 1 ) IMA3  IMA2 ) 
  $volatile IMB2 := ( $mux (s_in [] 1 ) IMA5  IMA4 ) 
  $volatile IMB3 := ( $mux (s_in [] 1 ) IMA7  IMA6 ) 
  $volatile IMB4 := ( $mux (s_in [] 1 ) IMA9  IMA8 ) 
  $volatile IMB5 := ( $mux (s_in [] 1 ) IMA11  IMA10 ) 
  $volatile IMB6 := ( $mux (s_in [] 1 ) IMA13  IMA12 ) 
  $volatile IMB7 := ( $mux (s_in [] 1 ) IMA15  IMA14 ) 
  $volatile IMB8 := ( $mux (s_in [] 1 ) IMA17  IMA16 ) 
  $volatile IMB9 := ( $mux (s_in [] 1 ) IMA19  IMA18 ) 
  $volatile IMB10 := ( $mux (s_in [] 1 ) IMA21  IMA20 ) 
  $volatile IMB11 := ( $mux (s_in [] 1 ) IMA23  IMA22 ) 
  $volatile IMB12 := ( $mux (s_in [] 1 ) IMA25  IMA24 ) 
  $volatile IMB13 := ( $mux (s_in [] 1 ) IMA27  IMA26 ) 
  $volatile IMB14 := ( $mux (s_in [] 1 ) IMA29  IMA28 ) 
  $volatile IMB15 := ( $mux (s_in [] 1 ) IMA31  IMA30 ) 
  $volatile IMB16 := ( $mux (s_in [] 1 ) IMA33  IMA32 ) 
  $volatile IMB17 := ( $mux (s_in [] 1 ) IMA35  IMA34 ) 
  $volatile IMB18 := ( $mux (s_in [] 1 ) IMA37  IMA36 ) 
  $volatile IMB19 := ( $mux (s_in [] 1 ) IMA39  IMA38 ) 
  $volatile IMB20 := ( $mux (s_in [] 1 ) IMA41  IMA40 ) 
  $volatile IMB21 := ( $mux (s_in [] 1 ) IMA43  IMA42 ) 
  $volatile IMB22 := ( $mux (s_in [] 1 ) IMA45  IMA44 ) 
  $volatile IMB23 := ( $mux (s_in [] 1 ) IMA47  IMA46 ) 
  $volatile IMB24 := ( $mux (s_in [] 1 ) IMA49  IMA48 ) 
  $volatile IMB25 := ( $mux (s_in [] 1 ) IMA51  IMA50 ) 
  $volatile IMB26 := ( $mux (s_in [] 1 ) IMA53  IMA52 ) 
  $volatile IMB27 := ( $mux (s_in [] 1 ) IMA55  IMA54 ) 
  $volatile IMB28 := ( $mux (s_in [] 1 ) IMA57  IMA56 ) 
  $volatile IMB29 := ( $mux (s_in [] 1 ) IMA59  IMA58 ) 
  $volatile IMB30 := ( $mux (s_in [] 1 ) IMA61  IMA60 ) 
  $volatile IMB31 := ( $mux (s_in [] 1 ) IMA63  IMA62 ) 
  $volatile IMB32 := ( $mux (s_in [] 1 ) IMA65  IMA64 ) 
  $volatile IMB33 := ( $mux (s_in [] 1 ) IMA67  IMA66 ) 
  $volatile IMB34 := ( $mux (s_in [] 1 ) IMA69  IMA68 ) 
  $volatile IMB35 := ( $mux (s_in [] 1 ) IMA71  IMA70 ) 
  $volatile IMB36 := ( $mux (s_in [] 1 ) IMA73  IMA72 ) 
  $volatile IMB37 := ( $mux (s_in [] 1 ) IMA75  IMA74 ) 
  $volatile IMB38 := ( $mux (s_in [] 1 ) IMA77  IMA76 ) 
  $volatile IMB39 := ( $mux (s_in [] 1 ) IMA79  IMA78 ) 
  $volatile IMB40 := ( $mux (s_in [] 1 ) IMA81  IMA80 ) 
  $volatile IMB41 := ( $mux (s_in [] 1 ) IMA83  IMA82 ) 
  $volatile IMB42 := ( $mux (s_in [] 1 ) IMA85  IMA84 ) 
  $volatile IMB43 := ( $mux (s_in [] 1 ) IMA87  IMA86 ) 
  $volatile IMB44 := ( $mux (s_in [] 1 ) IMA89  IMA88 ) 
  $volatile IMB45 := ( $mux (s_in [] 1 ) IMA91  IMA90 ) 
  $volatile IMB46 := ( $mux (s_in [] 1 ) IMA93  IMA92 ) 
  $volatile IMB47 := ( $mux (s_in [] 1 ) IMA95  IMA94 ) 
  $volatile IMB48 := ( $mux (s_in [] 1 ) IMA97  IMA96 ) 
  $volatile IMB49 := ( $mux (s_in [] 1 ) IMA99  IMA98 ) 
  $volatile IMB50 := ( $mux (s_in [] 1 ) IMA101  IMA100 ) 
  $volatile IMB51 := ( $mux (s_in [] 1 ) IMA103  IMA102 ) 
  $volatile IMB52 := ( $mux (s_in [] 1 ) IMA105  IMA104 ) 
  $volatile IMB53 := ( $mux (s_in [] 1 ) IMA107  IMA106 ) 
  $volatile IMB54 := ( $mux (s_in [] 1 ) IMA109  IMA108 ) 
  $volatile IMB55 := ( $mux (s_in [] 1 ) IMA111  IMA110 ) 
  $volatile IMB56 := ( $mux (s_in [] 1 ) IMA113  IMA112 ) 
  $volatile IMB57 := ( $mux (s_in [] 1 ) IMA115  IMA114 ) 
  $volatile IMB58 := ( $mux (s_in [] 1 ) IMA117  IMA116 ) 
  $volatile IMB59 := ( $mux (s_in [] 1 ) IMA119  IMA118 ) 
  $volatile IMB60 := ( $mux (s_in [] 1 ) IMA121  IMA120 ) 
  $volatile IMB61 := ( $mux (s_in [] 1 ) IMA123  IMA122 ) 
  $volatile IMB62 := ( $mux (s_in [] 1 ) IMA125  IMA124 ) 
  $volatile IMB63 := ( $mux (s_in [] 1 ) IMA127  IMA126 ) 
  $volatile IMC0 := ( $mux (s_in [] 2 ) IMB1  IMB0 ) 
  $volatile IMC1 := ( $mux (s_in [] 2 ) IMB3  IMB2 ) 
  $volatile IMC2 := ( $mux (s_in [] 2 ) IMB5  IMB4 ) 
  $volatile IMC3 := ( $mux (s_in [] 2 ) IMB7  IMB6 ) 
  $volatile IMC4 := ( $mux (s_in [] 2 ) IMB9  IMB8 ) 
  $volatile IMC5 := ( $mux (s_in [] 2 ) IMB11  IMB10 ) 
  $volatile IMC6 := ( $mux (s_in [] 2 ) IMB13  IMB12 ) 
  $volatile IMC7 := ( $mux (s_in [] 2 ) IMB15  IMB14 ) 
  $volatile IMC8 := ( $mux (s_in [] 2 ) IMB17  IMB16 ) 
  $volatile IMC9 := ( $mux (s_in [] 2 ) IMB19  IMB18 ) 
  $volatile IMC10 := ( $mux (s_in [] 2 ) IMB21  IMB20 ) 
  $volatile IMC11 := ( $mux (s_in [] 2 ) IMB23  IMB22 ) 
  $volatile IMC12 := ( $mux (s_in [] 2 ) IMB25  IMB24 ) 
  $volatile IMC13 := ( $mux (s_in [] 2 ) IMB27  IMB26 ) 
  $volatile IMC14 := ( $mux (s_in [] 2 ) IMB29  IMB28 ) 
  $volatile IMC15 := ( $mux (s_in [] 2 ) IMB31  IMB30 ) 
  $volatile IMC16 := ( $mux (s_in [] 2 ) IMB33  IMB32 ) 
  $volatile IMC17 := ( $mux (s_in [] 2 ) IMB35  IMB34 ) 
  $volatile IMC18 := ( $mux (s_in [] 2 ) IMB37  IMB36 ) 
  $volatile IMC19 := ( $mux (s_in [] 2 ) IMB39  IMB38 ) 
  $volatile IMC20 := ( $mux (s_in [] 2 ) IMB41  IMB40 ) 
  $volatile IMC21 := ( $mux (s_in [] 2 ) IMB43  IMB42 ) 
  $volatile IMC22 := ( $mux (s_in [] 2 ) IMB45  IMB44 ) 
  $volatile IMC23 := ( $mux (s_in [] 2 ) IMB47  IMB46 ) 
  $volatile IMC24 := ( $mux (s_in [] 2 ) IMB49  IMB48 ) 
  $volatile IMC25 := ( $mux (s_in [] 2 ) IMB51  IMB50 ) 
  $volatile IMC26 := ( $mux (s_in [] 2 ) IMB53  IMB52 ) 
  $volatile IMC27 := ( $mux (s_in [] 2 ) IMB55  IMB54 ) 
  $volatile IMC28 := ( $mux (s_in [] 2 ) IMB57  IMB56 ) 
  $volatile IMC29 := ( $mux (s_in [] 2 ) IMB59  IMB58 ) 
  $volatile IMC30 := ( $mux (s_in [] 2 ) IMB61  IMB60 ) 
  $volatile IMC31 := ( $mux (s_in [] 2 ) IMB63  IMB62 ) 
  $volatile IMD0 := ( $mux (s_in [] 3 ) IMC1  IMC0 ) 
  $volatile IMD1 := ( $mux (s_in [] 3 ) IMC3  IMC2 ) 
  $volatile IMD2 := ( $mux (s_in [] 3 ) IMC5  IMC4 ) 
  $volatile IMD3 := ( $mux (s_in [] 3 ) IMC7  IMC6 ) 
  $volatile IMD4 := ( $mux (s_in [] 3 ) IMC9  IMC8 ) 
  $volatile IMD5 := ( $mux (s_in [] 3 ) IMC11  IMC10 ) 
  $volatile IMD6 := ( $mux (s_in [] 3 ) IMC13  IMC12 ) 
  $volatile IMD7 := ( $mux (s_in [] 3 ) IMC15  IMC14 ) 
  $volatile IMD8 := ( $mux (s_in [] 3 ) IMC17  IMC16 ) 
  $volatile IMD9 := ( $mux (s_in [] 3 ) IMC19  IMC18 ) 
  $volatile IMD10 := ( $mux (s_in [] 3 ) IMC21  IMC20 ) 
  $volatile IMD11 := ( $mux (s_in [] 3 ) IMC23  IMC22 ) 
  $volatile IMD12 := ( $mux (s_in [] 3 ) IMC25  IMC24 ) 
  $volatile IMD13 := ( $mux (s_in [] 3 ) IMC27  IMC26 ) 
  $volatile IMD14 := ( $mux (s_in [] 3 ) IMC29  IMC28 ) 
  $volatile IMD15 := ( $mux (s_in [] 3 ) IMC31  IMC30 ) 
  $volatile IME0 := ( $mux (s_in [] 4 ) IMD1  IMD0 ) 
  $volatile IME1 := ( $mux (s_in [] 4 ) IMD3  IMD2 ) 
  $volatile IME2 := ( $mux (s_in [] 4 ) IMD5  IMD4 ) 
  $volatile IME3 := ( $mux (s_in [] 4 ) IMD7  IMD6 ) 
  $volatile IME4 := ( $mux (s_in [] 4 ) IMD9  IMD8 ) 
  $volatile IME5 := ( $mux (s_in [] 4 ) IMD11  IMD10 ) 
  $volatile IME6 := ( $mux (s_in [] 4 ) IMD13  IMD12 ) 
  $volatile IME7 := ( $mux (s_in [] 4 ) IMD15  IMD14 ) 
  $volatile IMF0 := ( $mux (s_in [] 5 ) IME1  IME0 ) 
  $volatile IMF1 := ( $mux (s_in [] 5 ) IME3  IME2 ) 
  $volatile IMF2 := ( $mux (s_in [] 5 ) IME5  IME4 ) 
  $volatile IMF3 := ( $mux (s_in [] 5 ) IME7  IME6 ) 
  $volatile IMG0 := ( $mux (s_in [] 6 ) IMF1  IMF0 ) 
  $volatile IMG1 := ( $mux (s_in [] 6 ) IMF3  IMF2 ) 
  s_out := ( $mux (s_in [] 7 ) IMG1  IMG0 ) 
}
$volatile $module [MUL2]
$in ( mul_in : $uint<8>  )
$out ( mul_out : $uint<8>  )
$is
{
  $constant  mod_const : $uint<8>:= _h1b  
  $volatile inx2 := (mul_in << 1 )
  mul_out := ( $mux (mul_in [] 7 ) (inx2 ^ mod_const)  inx2 ) 
}
$module [Out_wrap_daemon]
$in ()
$out ()
$is
{
  $constant  ZERO_COUNT : $uint<15>:= 0  
  $constant  ONE_COUNT : $uint<15>:= 1  
  $constant  ZERO : $uint<64>:= 0  
  $constant  MAX_COUNT : $uint<15>:= 511  
  $branchblock [MAIN]
  {
    head_out := out_wrap_cmd
    st_out := status_out
    w_out_buf := (head_out && st_out)
    $volatile ED := ( $slice head_out 63 63 ) 
    $volatile mode := ( $slice head_out 62 60 ) 
    $volatile got_new_key := ( $slice head_out 59 59 ) 
    $volatile unused_44 := ( $slice head_out 58 15 ) 
    $volatile count := ( $slice head_out 14 0 ) 
    count_blocks := (( $mux (MAX_COUNT < count) MAX_COUNT  _b0  )  | ( $mux (MAX_COUNT >= count) count  _b0  ) )
    $merge $entry loop1 
    $phi count_var := 			  ONE_COUNT $on $entry			  n_count_var $on loop1 // type of target is $uint<15>
    $endmerge
    $if (ED == 0 ) $then 
    w_out_buf := e_out_buf
    $else 
    w_out_buf := d_out_buf
    $endif
    $volatile n_count_var := (count_var + 1 )
    $if (count_var < count_blocks) $then 
    $place[loop1]
    $else 
    $if (count_var < MAX_COUNT) $then 
    $merge $entry loop2 
    $phi count_var2 := 				  n_count_var $on $entry				  n_count_var2 $on loop2 // type of target is $uint<15>
    $endmerge
    w_out_buf := out_wrap_data
    $volatile n_count_var2 := (count_var2 + 1 )
    $if (count_var2 < MAX_COUNT) $then 
    $place[loop2]
    $endif
    $endif
    $endif
  }
}
$module [c_block_daemon]
$in ()
$out ()
$is
{
  command := cmd_in
  $volatile ED := ( $slice command 63 63 ) 
  $volatile mode := ( $slice command 62 60 ) 
  $volatile got_new_key := ( $slice command 59 59 ) 
  $volatile unused_44 := ( $slice command 58 15 ) 
  $volatile count := ( $slice command 14 0 ) 
  $guard (got_new_key) Key_A := cmd_in
  $guard (got_new_key) Key_B := cmd_in
  $branchblock [Encryption]
  {
    $if (ED == 0 ) $then 
    status_out := 16 
    $merge $entry e_block_BUSY 
    $endmerge
    e_status := e_block_done
    $if (e_status == 0 ) $then 
    $place[e_block_BUSY]
    $endif
    $volatile e_cmd := ((got_new_key && count) && (Key_A && Key_B))
    e_cmd_pipe := e_cmd
    $endif
  }
  $branchblock [Decryption]
  {
    $if (ED == 1 ) $then 
    status_out := 32 
    $merge $entry d_block_BUSY 
    $endmerge
    d_status := d_block_done
    $if (d_status == 0 ) $then 
    $place[d_block_BUSY]
    $endif
    $volatile d_cmd := ((got_new_key && count) && (Key_A && Key_B))
    d_cmd_pipe := d_cmd
    $endif
  }
}
$volatile $module [sbox_mux_impl]
$in ( data_in : $uint<8>  )
$out ( s_out : $uint<8>  )
$is
{
  MA0 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 124  )  ($bitcast ($uint<8>) 99  ) ) 
  MA1 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 123  )  ($bitcast ($uint<8>) 119  ) ) 
  MA2 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 107  )  ($bitcast ($uint<8>) 242  ) ) 
  MA3 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 197  )  ($bitcast ($uint<8>) 111  ) ) 
  MA4 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 1  )  ($bitcast ($uint<8>) 48  ) ) 
  MA5 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 43  )  ($bitcast ($uint<8>) 103  ) ) 
  MA6 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 215  )  ($bitcast ($uint<8>) 254  ) ) 
  MA7 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 118  )  ($bitcast ($uint<8>) 171  ) ) 
  MA8 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 130  )  ($bitcast ($uint<8>) 202  ) ) 
  MA9 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 125  )  ($bitcast ($uint<8>) 201  ) ) 
  MA10 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 89  )  ($bitcast ($uint<8>) 250  ) ) 
  MA11 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 240  )  ($bitcast ($uint<8>) 71  ) ) 
  MA12 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 212  )  ($bitcast ($uint<8>) 173  ) ) 
  MA13 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 175  )  ($bitcast ($uint<8>) 162  ) ) 
  MA14 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 164  )  ($bitcast ($uint<8>) 156  ) ) 
  MA15 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 192  )  ($bitcast ($uint<8>) 114  ) ) 
  MA16 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 253  )  ($bitcast ($uint<8>) 183  ) ) 
  MA17 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 38  )  ($bitcast ($uint<8>) 147  ) ) 
  MA18 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 63  )  ($bitcast ($uint<8>) 54  ) ) 
  MA19 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 204  )  ($bitcast ($uint<8>) 247  ) ) 
  MA20 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 165  )  ($bitcast ($uint<8>) 52  ) ) 
  MA21 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 241  )  ($bitcast ($uint<8>) 229  ) ) 
  MA22 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 216  )  ($bitcast ($uint<8>) 113  ) ) 
  MA23 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 21  )  ($bitcast ($uint<8>) 49  ) ) 
  MA24 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 199  )  ($bitcast ($uint<8>) 4  ) ) 
  MA25 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 195  )  ($bitcast ($uint<8>) 35  ) ) 
  MA26 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 150  )  ($bitcast ($uint<8>) 24  ) ) 
  MA27 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 154  )  ($bitcast ($uint<8>) 5  ) ) 
  MA28 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 18  )  ($bitcast ($uint<8>) 7  ) ) 
  MA29 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 226  )  ($bitcast ($uint<8>) 128  ) ) 
  MA30 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 39  )  ($bitcast ($uint<8>) 235  ) ) 
  MA31 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 117  )  ($bitcast ($uint<8>) 178  ) ) 
  MA32 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 131  )  ($bitcast ($uint<8>) 9  ) ) 
  MA33 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 26  )  ($bitcast ($uint<8>) 44  ) ) 
  MA34 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 110  )  ($bitcast ($uint<8>) 27  ) ) 
  MA35 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 160  )  ($bitcast ($uint<8>) 90  ) ) 
  MA36 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 59  )  ($bitcast ($uint<8>) 82  ) ) 
  MA37 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 179  )  ($bitcast ($uint<8>) 214  ) ) 
  MA38 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 227  )  ($bitcast ($uint<8>) 41  ) ) 
  MA39 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 132  )  ($bitcast ($uint<8>) 47  ) ) 
  MA40 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 209  )  ($bitcast ($uint<8>) 83  ) ) 
  MA41 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 237  )  ($bitcast ($uint<8>) 0  ) ) 
  MA42 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 252  )  ($bitcast ($uint<8>) 32  ) ) 
  MA43 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 91  )  ($bitcast ($uint<8>) 177  ) ) 
  MA44 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 203  )  ($bitcast ($uint<8>) 106  ) ) 
  MA45 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 57  )  ($bitcast ($uint<8>) 190  ) ) 
  MA46 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 76  )  ($bitcast ($uint<8>) 74  ) ) 
  MA47 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 207  )  ($bitcast ($uint<8>) 88  ) ) 
  MA48 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 239  )  ($bitcast ($uint<8>) 208  ) ) 
  MA49 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 251  )  ($bitcast ($uint<8>) 170  ) ) 
  MA50 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 77  )  ($bitcast ($uint<8>) 67  ) ) 
  MA51 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 133  )  ($bitcast ($uint<8>) 51  ) ) 
  MA52 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 249  )  ($bitcast ($uint<8>) 69  ) ) 
  MA53 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 127  )  ($bitcast ($uint<8>) 2  ) ) 
  MA54 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 60  )  ($bitcast ($uint<8>) 80  ) ) 
  MA55 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 168  )  ($bitcast ($uint<8>) 159  ) ) 
  MA56 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 163  )  ($bitcast ($uint<8>) 81  ) ) 
  MA57 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 143  )  ($bitcast ($uint<8>) 64  ) ) 
  MA58 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 157  )  ($bitcast ($uint<8>) 146  ) ) 
  MA59 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 245  )  ($bitcast ($uint<8>) 56  ) ) 
  MA60 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 182  )  ($bitcast ($uint<8>) 188  ) ) 
  MA61 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 33  )  ($bitcast ($uint<8>) 218  ) ) 
  MA62 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 255  )  ($bitcast ($uint<8>) 16  ) ) 
  MA63 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 210  )  ($bitcast ($uint<8>) 243  ) ) 
  MA64 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 12  )  ($bitcast ($uint<8>) 205  ) ) 
  MA65 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 236  )  ($bitcast ($uint<8>) 19  ) ) 
  MA66 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 151  )  ($bitcast ($uint<8>) 95  ) ) 
  MA67 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 23  )  ($bitcast ($uint<8>) 68  ) ) 
  MA68 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 167  )  ($bitcast ($uint<8>) 196  ) ) 
  MA69 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 61  )  ($bitcast ($uint<8>) 126  ) ) 
  MA70 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 93  )  ($bitcast ($uint<8>) 100  ) ) 
  MA71 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 115  )  ($bitcast ($uint<8>) 25  ) ) 
  MA72 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 129  )  ($bitcast ($uint<8>) 96  ) ) 
  MA73 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 220  )  ($bitcast ($uint<8>) 79  ) ) 
  MA74 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 42  )  ($bitcast ($uint<8>) 34  ) ) 
  MA75 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 136  )  ($bitcast ($uint<8>) 144  ) ) 
  MA76 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 238  )  ($bitcast ($uint<8>) 70  ) ) 
  MA77 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 20  )  ($bitcast ($uint<8>) 184  ) ) 
  MA78 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 94  )  ($bitcast ($uint<8>) 222  ) ) 
  MA79 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 219  )  ($bitcast ($uint<8>) 11  ) ) 
  MA80 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 50  )  ($bitcast ($uint<8>) 224  ) ) 
  MA81 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 10  )  ($bitcast ($uint<8>) 58  ) ) 
  MA82 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 6  )  ($bitcast ($uint<8>) 73  ) ) 
  MA83 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 92  )  ($bitcast ($uint<8>) 36  ) ) 
  MA84 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 211  )  ($bitcast ($uint<8>) 194  ) ) 
  MA85 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 98  )  ($bitcast ($uint<8>) 172  ) ) 
  MA86 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 149  )  ($bitcast ($uint<8>) 145  ) ) 
  MA87 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 121  )  ($bitcast ($uint<8>) 228  ) ) 
  MA88 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 200  )  ($bitcast ($uint<8>) 231  ) ) 
  MA89 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 109  )  ($bitcast ($uint<8>) 55  ) ) 
  MA90 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 213  )  ($bitcast ($uint<8>) 141  ) ) 
  MA91 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 169  )  ($bitcast ($uint<8>) 78  ) ) 
  MA92 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 86  )  ($bitcast ($uint<8>) 108  ) ) 
  MA93 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 234  )  ($bitcast ($uint<8>) 244  ) ) 
  MA94 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 122  )  ($bitcast ($uint<8>) 101  ) ) 
  MA95 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 8  )  ($bitcast ($uint<8>) 174  ) ) 
  MA96 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 120  )  ($bitcast ($uint<8>) 186  ) ) 
  MA97 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 46  )  ($bitcast ($uint<8>) 37  ) ) 
  MA98 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 166  )  ($bitcast ($uint<8>) 28  ) ) 
  MA99 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 198  )  ($bitcast ($uint<8>) 180  ) ) 
  MA100 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 221  )  ($bitcast ($uint<8>) 232  ) ) 
  MA101 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 31  )  ($bitcast ($uint<8>) 116  ) ) 
  MA102 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 189  )  ($bitcast ($uint<8>) 75  ) ) 
  MA103 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 138  )  ($bitcast ($uint<8>) 139  ) ) 
  MA104 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 62  )  ($bitcast ($uint<8>) 112  ) ) 
  MA105 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 102  )  ($bitcast ($uint<8>) 181  ) ) 
  MA106 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 3  )  ($bitcast ($uint<8>) 72  ) ) 
  MA107 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 14  )  ($bitcast ($uint<8>) 246  ) ) 
  MA108 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 53  )  ($bitcast ($uint<8>) 97  ) ) 
  MA109 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 185  )  ($bitcast ($uint<8>) 87  ) ) 
  MA110 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 193  )  ($bitcast ($uint<8>) 134  ) ) 
  MA111 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 158  )  ($bitcast ($uint<8>) 29  ) ) 
  MA112 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 248  )  ($bitcast ($uint<8>) 225  ) ) 
  MA113 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 17  )  ($bitcast ($uint<8>) 152  ) ) 
  MA114 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 217  )  ($bitcast ($uint<8>) 105  ) ) 
  MA115 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 148  )  ($bitcast ($uint<8>) 142  ) ) 
  MA116 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 30  )  ($bitcast ($uint<8>) 155  ) ) 
  MA117 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 233  )  ($bitcast ($uint<8>) 135  ) ) 
  MA118 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 85  )  ($bitcast ($uint<8>) 206  ) ) 
  MA119 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 223  )  ($bitcast ($uint<8>) 40  ) ) 
  MA120 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 161  )  ($bitcast ($uint<8>) 140  ) ) 
  MA121 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 13  )  ($bitcast ($uint<8>) 137  ) ) 
  MA122 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 230  )  ($bitcast ($uint<8>) 191  ) ) 
  MA123 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 104  )  ($bitcast ($uint<8>) 66  ) ) 
  MA124 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 153  )  ($bitcast ($uint<8>) 65  ) ) 
  MA125 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 15  )  ($bitcast ($uint<8>) 45  ) ) 
  MA126 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 84  )  ($bitcast ($uint<8>) 176  ) ) 
  MA127 := ( $mux (data_in [] 0 ) ($bitcast ($uint<8>) 22  )  ($bitcast ($uint<8>) 187  ) ) 
  MB0 := ( $mux (data_in [] 1 ) MA1  MA0 ) 
  MB1 := ( $mux (data_in [] 1 ) MA3  MA2 ) 
  MB2 := ( $mux (data_in [] 1 ) MA5  MA4 ) 
  MB3 := ( $mux (data_in [] 1 ) MA7  MA6 ) 
  MB4 := ( $mux (data_in [] 1 ) MA9  MA8 ) 
  MB5 := ( $mux (data_in [] 1 ) MA11  MA10 ) 
  MB6 := ( $mux (data_in [] 1 ) MA13  MA12 ) 
  MB7 := ( $mux (data_in [] 1 ) MA15  MA14 ) 
  MB8 := ( $mux (data_in [] 1 ) MA17  MA16 ) 
  MB9 := ( $mux (data_in [] 1 ) MA19  MA18 ) 
  MB10 := ( $mux (data_in [] 1 ) MA21  MA20 ) 
  MB11 := ( $mux (data_in [] 1 ) MA23  MA22 ) 
  MB12 := ( $mux (data_in [] 1 ) MA25  MA24 ) 
  MB13 := ( $mux (data_in [] 1 ) MA27  MA26 ) 
  MB14 := ( $mux (data_in [] 1 ) MA29  MA28 ) 
  MB15 := ( $mux (data_in [] 1 ) MA31  MA30 ) 
  MB16 := ( $mux (data_in [] 1 ) MA33  MA32 ) 
  MB17 := ( $mux (data_in [] 1 ) MA35  MA34 ) 
  MB18 := ( $mux (data_in [] 1 ) MA37  MA36 ) 
  MB19 := ( $mux (data_in [] 1 ) MA39  MA38 ) 
  MB20 := ( $mux (data_in [] 1 ) MA41  MA40 ) 
  MB21 := ( $mux (data_in [] 1 ) MA43  MA42 ) 
  MB22 := ( $mux (data_in [] 1 ) MA45  MA44 ) 
  MB23 := ( $mux (data_in [] 1 ) MA47  MA46 ) 
  MB24 := ( $mux (data_in [] 1 ) MA49  MA48 ) 
  MB25 := ( $mux (data_in [] 1 ) MA51  MA50 ) 
  MB26 := ( $mux (data_in [] 1 ) MA53  MA52 ) 
  MB27 := ( $mux (data_in [] 1 ) MA55  MA54 ) 
  MB28 := ( $mux (data_in [] 1 ) MA57  MA56 ) 
  MB29 := ( $mux (data_in [] 1 ) MA59  MA58 ) 
  MB30 := ( $mux (data_in [] 1 ) MA61  MA60 ) 
  MB31 := ( $mux (data_in [] 1 ) MA63  MA62 ) 
  MB32 := ( $mux (data_in [] 1 ) MA65  MA64 ) 
  MB33 := ( $mux (data_in [] 1 ) MA67  MA66 ) 
  MB34 := ( $mux (data_in [] 1 ) MA69  MA68 ) 
  MB35 := ( $mux (data_in [] 1 ) MA71  MA70 ) 
  MB36 := ( $mux (data_in [] 1 ) MA73  MA72 ) 
  MB37 := ( $mux (data_in [] 1 ) MA75  MA74 ) 
  MB38 := ( $mux (data_in [] 1 ) MA77  MA76 ) 
  MB39 := ( $mux (data_in [] 1 ) MA79  MA78 ) 
  MB40 := ( $mux (data_in [] 1 ) MA81  MA80 ) 
  MB41 := ( $mux (data_in [] 1 ) MA83  MA82 ) 
  MB42 := ( $mux (data_in [] 1 ) MA85  MA84 ) 
  MB43 := ( $mux (data_in [] 1 ) MA87  MA86 ) 
  MB44 := ( $mux (data_in [] 1 ) MA89  MA88 ) 
  MB45 := ( $mux (data_in [] 1 ) MA91  MA90 ) 
  MB46 := ( $mux (data_in [] 1 ) MA93  MA92 ) 
  MB47 := ( $mux (data_in [] 1 ) MA95  MA94 ) 
  MB48 := ( $mux (data_in [] 1 ) MA97  MA96 ) 
  MB49 := ( $mux (data_in [] 1 ) MA99  MA98 ) 
  MB50 := ( $mux (data_in [] 1 ) MA101  MA100 ) 
  MB51 := ( $mux (data_in [] 1 ) MA103  MA102 ) 
  MB52 := ( $mux (data_in [] 1 ) MA105  MA104 ) 
  MB53 := ( $mux (data_in [] 1 ) MA107  MA106 ) 
  MB54 := ( $mux (data_in [] 1 ) MA109  MA108 ) 
  MB55 := ( $mux (data_in [] 1 ) MA111  MA110 ) 
  MB56 := ( $mux (data_in [] 1 ) MA113  MA112 ) 
  MB57 := ( $mux (data_in [] 1 ) MA115  MA114 ) 
  MB58 := ( $mux (data_in [] 1 ) MA117  MA116 ) 
  MB59 := ( $mux (data_in [] 1 ) MA119  MA118 ) 
  MB60 := ( $mux (data_in [] 1 ) MA121  MA120 ) 
  MB61 := ( $mux (data_in [] 1 ) MA123  MA122 ) 
  MB62 := ( $mux (data_in [] 1 ) MA125  MA124 ) 
  MB63 := ( $mux (data_in [] 1 ) MA127  MA126 ) 
  MC0 := ( $mux (data_in [] 2 ) MB1  MB0 ) 
  MC1 := ( $mux (data_in [] 2 ) MB3  MB2 ) 
  MC2 := ( $mux (data_in [] 2 ) MB5  MB4 ) 
  MC3 := ( $mux (data_in [] 2 ) MB7  MB6 ) 
  MC4 := ( $mux (data_in [] 2 ) MB9  MB8 ) 
  MC5 := ( $mux (data_in [] 2 ) MB11  MB10 ) 
  MC6 := ( $mux (data_in [] 2 ) MB13  MB12 ) 
  MC7 := ( $mux (data_in [] 2 ) MB15  MB14 ) 
  MC8 := ( $mux (data_in [] 2 ) MB17  MB16 ) 
  MC9 := ( $mux (data_in [] 2 ) MB19  MB18 ) 
  MC10 := ( $mux (data_in [] 2 ) MB21  MB20 ) 
  MC11 := ( $mux (data_in [] 2 ) MB23  MB22 ) 
  MC12 := ( $mux (data_in [] 2 ) MB25  MB24 ) 
  MC13 := ( $mux (data_in [] 2 ) MB27  MB26 ) 
  MC14 := ( $mux (data_in [] 2 ) MB29  MB28 ) 
  MC15 := ( $mux (data_in [] 2 ) MB31  MB30 ) 
  MC16 := ( $mux (data_in [] 2 ) MB33  MB32 ) 
  MC17 := ( $mux (data_in [] 2 ) MB35  MB34 ) 
  MC18 := ( $mux (data_in [] 2 ) MB37  MB36 ) 
  MC19 := ( $mux (data_in [] 2 ) MB39  MB38 ) 
  MC20 := ( $mux (data_in [] 2 ) MB41  MB40 ) 
  MC21 := ( $mux (data_in [] 2 ) MB43  MB42 ) 
  MC22 := ( $mux (data_in [] 2 ) MB45  MB44 ) 
  MC23 := ( $mux (data_in [] 2 ) MB47  MB46 ) 
  MC24 := ( $mux (data_in [] 2 ) MB49  MB48 ) 
  MC25 := ( $mux (data_in [] 2 ) MB51  MB50 ) 
  MC26 := ( $mux (data_in [] 2 ) MB53  MB52 ) 
  MC27 := ( $mux (data_in [] 2 ) MB55  MB54 ) 
  MC28 := ( $mux (data_in [] 2 ) MB57  MB56 ) 
  MC29 := ( $mux (data_in [] 2 ) MB59  MB58 ) 
  MC30 := ( $mux (data_in [] 2 ) MB61  MB60 ) 
  MC31 := ( $mux (data_in [] 2 ) MB63  MB62 ) 
  MD0 := ( $mux (data_in [] 3 ) MC1  MC0 ) 
  MD1 := ( $mux (data_in [] 3 ) MC3  MC2 ) 
  MD2 := ( $mux (data_in [] 3 ) MC5  MC4 ) 
  MD3 := ( $mux (data_in [] 3 ) MC7  MC6 ) 
  MD4 := ( $mux (data_in [] 3 ) MC9  MC8 ) 
  MD5 := ( $mux (data_in [] 3 ) MC11  MC10 ) 
  MD6 := ( $mux (data_in [] 3 ) MC13  MC12 ) 
  MD7 := ( $mux (data_in [] 3 ) MC15  MC14 ) 
  MD8 := ( $mux (data_in [] 3 ) MC17  MC16 ) 
  MD9 := ( $mux (data_in [] 3 ) MC19  MC18 ) 
  MD10 := ( $mux (data_in [] 3 ) MC21  MC20 ) 
  MD11 := ( $mux (data_in [] 3 ) MC23  MC22 ) 
  MD12 := ( $mux (data_in [] 3 ) MC25  MC24 ) 
  MD13 := ( $mux (data_in [] 3 ) MC27  MC26 ) 
  MD14 := ( $mux (data_in [] 3 ) MC29  MC28 ) 
  MD15 := ( $mux (data_in [] 3 ) MC31  MC30 ) 
  ME0 := ( $mux (data_in [] 4 ) MD1  MD0 ) 
  ME1 := ( $mux (data_in [] 4 ) MD3  MD2 ) 
  ME2 := ( $mux (data_in [] 4 ) MD5  MD4 ) 
  ME3 := ( $mux (data_in [] 4 ) MD7  MD6 ) 
  ME4 := ( $mux (data_in [] 4 ) MD9  MD8 ) 
  ME5 := ( $mux (data_in [] 4 ) MD11  MD10 ) 
  ME6 := ( $mux (data_in [] 4 ) MD13  MD12 ) 
  ME7 := ( $mux (data_in [] 4 ) MD15  MD14 ) 
  MF0 := ( $mux (data_in [] 5 ) ME1  ME0 ) 
  MF1 := ( $mux (data_in [] 5 ) ME3  ME2 ) 
  MF2 := ( $mux (data_in [] 5 ) ME5  ME4 ) 
  MF3 := ( $mux (data_in [] 5 ) ME7  ME6 ) 
  MG0 := ( $mux (data_in [] 6 ) MF1  MF0 ) 
  MG1 := ( $mux (data_in [] 6 ) MF3  MF2 ) 
  s_out := ( $mux (data_in [] 7 ) MG1  MG0 ) 
}
$module [key_expand_single]
$in ( K_in : $uint<128>   Round_C : $uint<8>  )
$out ( K_out : $uint<128>   nRound_C : $uint<8>  )
$is
{
  $constant  mod_const : $uint<8>:= _h1b  
  $volatile Ka := ( $slice K_in 127 96 ) 
  $volatile Kb := ( $slice K_in 95 64 ) 
  $volatile Kc := ( $slice K_in 63 32 ) 
  $volatile Kd := ( $slice K_in 31 0 ) 
  $volatile K00 := ( $slice Ka 31 24 ) 
  $volatile K01 := ( $slice Ka 23 16 ) 
  $volatile K02 := ( $slice Ka 15 8 ) 
  $volatile K03 := ( $slice Ka 7 0 ) 
  $volatile K04 := ( $slice Kb 31 24 ) 
  $volatile K05 := ( $slice Kb 23 16 ) 
  $volatile K06 := ( $slice Kb 15 8 ) 
  $volatile K07 := ( $slice Kb 7 0 ) 
  $volatile K08 := ( $slice Kc 31 24 ) 
  $volatile K09 := ( $slice Kc 23 16 ) 
  $volatile K10 := ( $slice Kc 15 8 ) 
  $volatile K11 := ( $slice Kc 7 0 ) 
  $volatile K12 := ( $slice Kd 31 24 ) 
  $volatile K13 := ( $slice Kd 23 16 ) 
  $volatile K14 := ( $slice Kd 15 8 ) 
  $volatile K15 := ( $slice Kd 7 0 ) 
  $volatile 	$call sbox_mux_impl (K12 ) (K12sr )  $buffering 36
  $volatile 	$call sbox_mux_impl (K13 ) (K13sr ) 
  $volatile 	$call sbox_mux_impl (K14 ) (K14sr ) 
  $volatile 	$call sbox_mux_impl (K15 ) (K15sr ) 
  $volatile X0 := (Round_C ^ K13sr)
  $volatile nK00 := (K00 ^ X0)
  $volatile nK01 := (K01 ^ K14sr)
  $volatile nK02 := (K02 ^ K15sr)
  $volatile nK03 := (K03 ^ K12sr)
  $volatile nK04 := (K04 ^ nK00)
  $volatile nK05 := (K05 ^ nK01)
  $volatile nK06 := (K06 ^ nK02)
  $volatile nK07 := (K07 ^ nK03)
  $volatile nK08 := (K08 ^ nK04)
  $volatile nK09 := (K09 ^ nK05)
  $volatile nK10 := (K10 ^ nK06)
  $volatile nK11 := (K11 ^ nK07)
  $volatile nK12 := (K12 ^ nK08)
  $volatile nK13 := (K13 ^ nK09)
  $volatile nK14 := (K14 ^ nK10)
  $volatile nK15 := (K15 ^ nK11)
  $volatile Yk0 := ((nK00 && nK01) && (nK02 && nK03))
  $volatile Yk1 := ((nK04 && nK05) && (nK06 && nK07))
  $volatile Yk2 := ((nK08 && nK09) && (nK10 && nK11))
  $volatile Yk3 := ((nK12 && nK13) && (nK14 && nK15))
  $volatile nKey := ((Yk0 && Yk1) && (Yk2 && Yk3))
  $volatile Rx2 := (Round_C << 1 )
  nRound_C := ( $mux (Round_C [] 7 ) (Rx2 ^ mod_const)  Rx2 ) 
  K_out := nKey
}
$operator $module [dec_round]
$in ( round_in : $uint<128>   key_in : $uint<128>   l_round : $uint<1>  )
$out ( round_out : $uint<128>  )
$is
{
  $constant  sel : $uint<8>:= _b01111111  
  $volatile ISa := ( $slice round_in 127 96 ) 
  $volatile ISb := ( $slice round_in 95 64 ) 
  $volatile ISc := ( $slice round_in 63 32 ) 
  $volatile ISd := ( $slice round_in 31 0 ) 
  $volatile IS00 := ( $slice ISa 31 24 ) 
  $volatile IS01 := ( $slice ISa 23 16 ) 
  $volatile IS02 := ( $slice ISa 15 8 ) 
  $volatile IS03 := ( $slice ISa 7 0 ) 
  $volatile IS04 := ( $slice ISb 31 24 ) 
  $volatile IS05 := ( $slice ISb 23 16 ) 
  $volatile IS06 := ( $slice ISb 15 8 ) 
  $volatile IS07 := ( $slice ISb 7 0 ) 
  $volatile IS08 := ( $slice ISc 31 24 ) 
  $volatile IS09 := ( $slice ISc 23 16 ) 
  $volatile IS10 := ( $slice ISc 15 8 ) 
  $volatile IS11 := ( $slice ISc 7 0 ) 
  $volatile IS12 := ( $slice ISd 31 24 ) 
  $volatile IS13 := ( $slice ISd 23 16 ) 
  $volatile IS14 := ( $slice ISd 15 8 ) 
  $volatile IS15 := ( $slice ISd 7 0 ) 
  $volatile 	$call MUL2 (IS00 ) (IS00x2 )  $buffering 14628176
  $volatile 	$call MUL2 (IS01 ) (IS01x2 )  $buffering 13205504
  $volatile 	$call MUL2 (IS02 ) (IS02x2 )  $buffering 11222656
  $volatile 	$call MUL2 (IS03 ) (IS03x2 )  $buffering 10882464
  $volatile 	$call MUL2 (IS04 ) (IS04x2 )  $buffering 12918560
  $volatile 	$call MUL2 (IS05 ) (IS05x2 )  $buffering 14143168
  $volatile 	$call MUL2 (IS06 ) (IS06x2 )  $buffering 14994768
  $volatile 	$call MUL2 (IS07 ) (IS07x2 )  $buffering 13530128
  $volatile 	$call MUL2 (IS08 ) (IS08x2 )  $buffering 13792464
  $volatile 	$call MUL2 (IS09 ) (IS09x2 )  $buffering 17366848
  $volatile 	$call MUL2 (IS10 ) (IS10x2 )  $buffering 15849520
  $volatile 	$call MUL2 (IS11 ) (IS11x2 )  $buffering 116
  $volatile 	$call MUL2 (IS12 ) (IS12x2 )  $buffering 77
  $volatile 	$call MUL2 (IS13 ) (IS13x2 )  $buffering 17223600
  $volatile 	$call MUL2 (IS14 ) (IS14x2 )  $buffering 17279184
  $volatile 	$call MUL2 (IS15 ) (IS15x2 )  $buffering 14063152
  $volatile Wc0 := ((IS00 ^ IS01) ^ (IS02 ^ IS03))
  $volatile Wc1 := ((IS04 ^ IS05) ^ (IS06 ^ IS07))
  $volatile Wc2 := ((IS08 ^ IS09) ^ (IS10 ^ IS11))
  $volatile Wc3 := ((IS12 ^ IS13) ^ (IS14 ^ IS15))
  $volatile Y00 := (IS00x2 ^ IS02x2)
  $volatile Y01 := (IS04x2 ^ IS06x2)
  $volatile Y02 := (IS08x2 ^ IS10x2)
  $volatile Y03 := (IS12x2 ^ IS14x2)
  $volatile Y10 := (IS01x2 ^ IS03x2)
  $volatile Y11 := (IS05x2 ^ IS07x2)
  $volatile Y12 := (IS09x2 ^ IS11x2)
  $volatile Y13 := (IS13x2 ^ IS15x2)
  $volatile 	$call MUL2 (Y00 ) (Y00x2 ) 
  $volatile 	$call MUL2 (Y01 ) (Y01x2 ) 
  $volatile 	$call MUL2 (Y02 ) (Y02x2 ) 
  $volatile 	$call MUL2 (Y03 ) (Y03x2 ) 
  $volatile 	$call MUL2 (Y10 ) (Y10x2 ) 
  $volatile 	$call MUL2 (Y11 ) (Y11x2 ) 
  $volatile 	$call MUL2 (Y12 ) (Y12x2 ) 
  $volatile 	$call MUL2 (Y13 ) (Y13x2 ) 
  $volatile Z0 := (Y00x2 ^ Y10x2)
  $volatile Z1 := (Y01x2 ^ Y11x2)
  $volatile Z2 := (Y02x2 ^ Y12x2)
  $volatile Z3 := (Y03x2 ^ Y13x2)
  $volatile 	$call MUL2 (Z0 ) (Z0x2 )  $buffering 9
  $volatile 	$call MUL2 (Z1 ) (Z1x2 )  $buffering 14628176
  $volatile 	$call MUL2 (Z2 ) (Z2x2 )  $buffering 14228880
  $volatile 	$call MUL2 (Z3 ) (Z3x2 )  $buffering 15120832
  $volatile A0 := (Z0x2 ^ Wc0)
  $volatile A1 := (Z1x2 ^ Wc1)
  $volatile A2 := (Z2x2 ^ Wc2)
  $volatile A3 := (Z3x2 ^ Wc3)
  $volatile B00 := (A0 ^ Y00x2)
  $volatile B01 := (A1 ^ Y01x2)
  $volatile B02 := (A2 ^ Y02x2)
  $volatile B03 := (A3 ^ Y03x2)
  $volatile B10 := (A0 ^ Y10x2)
  $volatile B11 := (A1 ^ Y11x2)
  $volatile B12 := (A2 ^ Y12x2)
  $volatile B13 := (A3 ^ Y13x2)
  $volatile IMX00 := ((B00 ^ IS00) ^ (IS00x2 ^ IS01x2))
  $volatile IMX01 := ((B10 ^ IS01) ^ (IS01x2 ^ IS02x2))
  $volatile IMX02 := ((B00 ^ IS02) ^ (IS02x2 ^ IS03x2))
  $volatile IMX03 := ((B10 ^ IS03) ^ (IS03x2 ^ IS00x2))
  $volatile IMX04 := ((B01 ^ IS04) ^ (IS04x2 ^ IS05x2))
  $volatile IMX05 := ((B11 ^ IS05) ^ (IS05x2 ^ IS06x2))
  $volatile IMX06 := ((B01 ^ IS06) ^ (IS06x2 ^ IS07x2))
  $volatile IMX07 := ((B11 ^ IS07) ^ (IS07x2 ^ IS04x2))
  $volatile IMX08 := ((B02 ^ IS08) ^ (IS08x2 ^ IS09x2))
  $volatile IMX09 := ((B12 ^ IS09) ^ (IS09x2 ^ IS10x2))
  $volatile IMX10 := ((B02 ^ IS10) ^ (IS10x2 ^ IS11x2))
  $volatile IMX11 := ((B12 ^ IS11) ^ (IS11x2 ^ IS08x2))
  $volatile IMX12 := ((B03 ^ IS12) ^ (IS12x2 ^ IS13x2))
  $volatile IMX13 := ((B13 ^ IS13) ^ (IS13x2 ^ IS14x2))
  $volatile IMX14 := ((B03 ^ IS14) ^ (IS14x2 ^ IS15x2))
  $volatile IMX15 := ((B13 ^ IS15) ^ (IS15x2 ^ IS12x2))
  $volatile ISbox_in00 := ( $mux l_round IS00  IMX00 ) 
  $volatile ISbox_in01 := ( $mux l_round IS01  IMX01 ) 
  $volatile ISbox_in02 := ( $mux l_round IS02  IMX02 ) 
  $volatile ISbox_in03 := ( $mux l_round IS03  IMX03 ) 
  $volatile ISbox_in04 := ( $mux l_round IS04  IMX04 ) 
  $volatile ISbox_in05 := ( $mux l_round IS05  IMX05 ) 
  $volatile ISbox_in06 := ( $mux l_round IS06  IMX06 ) 
  $volatile ISbox_in07 := ( $mux l_round IS07  IMX07 ) 
  $volatile ISbox_in08 := ( $mux l_round IS08  IMX08 ) 
  $volatile ISbox_in09 := ( $mux l_round IS09  IMX09 ) 
  $volatile ISbox_in10 := ( $mux l_round IS10  IMX10 ) 
  $volatile ISbox_in11 := ( $mux l_round IS11  IMX11 ) 
  $volatile ISbox_in12 := ( $mux l_round IS12  IMX12 ) 
  $volatile ISbox_in13 := ( $mux l_round IS13  IMX13 ) 
  $volatile ISbox_in14 := ( $mux l_round IS14  IMX14 ) 
  $volatile ISbox_in15 := ( $mux l_round IS15  IMX15 ) 
  $volatile 	$call Inv_Sbox_1 (ISbox_in00 ) (Sout00 )  $buffering 14699376
  $volatile 	$call Inv_Sbox_2 (ISbox_in01 ) (Sout05 )  $buffering 14800464
  $volatile 	$call Inv_Sbox_3 (ISbox_in02 ) (Sout10 ) 
  $volatile 	$call Inv_Sbox_4 (ISbox_in03 ) (Sout15 ) 
  $volatile 	$call Inv_Sbox_1 (ISbox_in04 ) (Sout04 ) 
  $volatile 	$call Inv_Sbox_2 (ISbox_in05 ) (Sout09 ) 
  $volatile 	$call Inv_Sbox_3 (ISbox_in06 ) (Sout14 ) 
  $volatile 	$call Inv_Sbox_4 (ISbox_in07 ) (Sout03 ) 
  $volatile 	$call Inv_Sbox_1 (ISbox_in08 ) (Sout08 ) 
  $volatile 	$call Inv_Sbox_2 (ISbox_in09 ) (Sout13 ) 
  $volatile 	$call Inv_Sbox_3 (ISbox_in10 ) (Sout02 ) 
  $volatile 	$call Inv_Sbox_4 (ISbox_in11 ) (Sout07 ) 
  $volatile 	$call Inv_Sbox_1 (ISbox_in12 ) (Sout12 ) 
  $volatile 	$call Inv_Sbox_2 (ISbox_in13 ) (Sout01 ) 
  $volatile 	$call Inv_Sbox_3 (ISbox_in14 ) (Sout06 ) 
  $volatile 	$call Inv_Sbox_4 (ISbox_in15 ) (Sout11 ) 
  $volatile ISX0 := ((Sout00 && Sout01) && (Sout02 && Sout03))
  $volatile ISX1 := ((Sout04 && Sout05) && (Sout06 && Sout07))
  $volatile ISX2 := ((Sout08 && Sout09) && (Sout10 && Sout11))
  $volatile ISX3 := ((Sout12 && Sout13) && (Sout14 && Sout15))
  $volatile OUT := ((ISX0 && ISX1) && (ISX2 && ISX3))
  round_out := (OUT ^ key_in)
}
$module [d_block_daemon]
$in ()
$out ()
$is
{
  $constant  RConstant_1 : $uint<8>:= _h01  
  $constant  NOT_LAST : $uint<1>:= 0  
  $constant  LAST : $uint<1>:= 1  
  $constant  ZERO_COUNT : $uint<15>:= 0  
  $branchblock [D_MAIN]
  {
    d_block_done := 1 
    $merge $entry NotGotCmd 
    $endmerge
    d_init_cmd := d_cmd_pipe
    $volatile d_get_key := ( $slice d_init_cmd 143 143 ) 
    $volatile d_init_count := ( $slice d_init_cmd 142 128 ) 
    $volatile d_init_key := ( $slice d_init_cmd 127 0 ) 
    $if (d_get_key == 0 ) $then 
    $place[NotGotCmd]
    $endif
    $merge $entry GotNewKey 
    $phi K0 := 			  d_init_key $on $entry			  d_new_key $on GotNewKey // type of target is $uint<128>
    $phi countA := 			  d_init_count $on $entry			  d_new_count $on GotNewKey // type of target is $uint<15>
    $endmerge
    $call key_expand_single (K0 RConstant_1 ) (K1 RConstant_2 ) 
    $call key_expand_single (K1 RConstant_2 ) (K2 RConstant_3 ) 
    $call key_expand_single (K2 RConstant_3 ) (K3 RConstant_4 ) 
    $call key_expand_single (K3 RConstant_4 ) (K4 RConstant_5 ) 
    $call key_expand_single (K4 RConstant_5 ) (K5 RConstant_6 ) 
    $call key_expand_single (K5 RConstant_6 ) (K6 RConstant_7 ) 
    $call key_expand_single (K6 RConstant_7 ) (K7 RConstant_8 ) 
    $call key_expand_single (K7 RConstant_8 ) (K8 RConstant_9 ) 
    $call key_expand_single (K8 RConstant_9 ) (K9 RConstant_10 ) 
    $call key_expand_single (K9 RConstant_10 ) (K10 RConstant_11 ) 
    $merge $entry NotGotNewKey 
    $phi countB := 			  countA $on $entry			  d_new_count $on NotGotNewKey // type of target is $uint<15>
    $endmerge
    $dopipeline $depth 2 $buffering 1
    $merge $entry $loopback 
    $phi count_var := 			  ZERO_COUNT $on $entry			  n_count_var $on $loopback // type of target is $uint<15>
    $endmerge
    in128 := d_in_buf
    K10_12936_delayed_1 := K10
    $volatile round_S10 := (in128 ^ K10_12936_delayed_1)
    K9_12940_delayed_1 := K9
    $call dec_round (round_S10 K9_12940_delayed_1 LAST ) (round_S9 ) 
    K8_12945_delayed_2 := K8 $buffering 2
    $call dec_round (round_S9 K8_12945_delayed_2 NOT_LAST ) (round_S8 ) 
    K7_12950_delayed_3 := K7 $buffering 3
    $call dec_round (round_S8 K7_12950_delayed_3 NOT_LAST ) (round_S7 ) 
    K6_12955_delayed_4 := K6 $buffering 4
    $call dec_round (round_S7 K6_12955_delayed_4 NOT_LAST ) (round_S6 ) 
    K5_12960_delayed_5 := K5 $buffering 5
    $call dec_round (round_S6 K5_12960_delayed_5 NOT_LAST ) (round_S5 ) 
    K4_12965_delayed_6 := K4 $buffering 6
    $call dec_round (round_S5 K4_12965_delayed_6 NOT_LAST ) (round_S4 ) 
    K3_12970_delayed_7 := K3 $buffering 7
    $call dec_round (round_S4 K3_12970_delayed_7 NOT_LAST ) (round_S3 ) 
    K2_12975_delayed_8 := K2 $buffering 8
    $call dec_round (round_S3 K2_12975_delayed_8 NOT_LAST ) (round_S2 ) 
    K1_12980_delayed_9 := K1 $buffering 9
    $call dec_round (round_S2 K1_12980_delayed_9 NOT_LAST ) (round_S1 ) 
    K0_12985_delayed_10 := K0 $buffering 10
    $call dec_round (round_S1 K0_12985_delayed_10 NOT_LAST ) (round_S0 ) 
    d_out_buf := round_S0
    n_count_var := (count_var + 1 )
    $while (n_count_var < countB)
    d_block_done := 1 
    d_new_cmd := d_cmd_pipe
    $volatile d_get_new_key := ( $slice d_new_cmd 143 143 ) 
    $volatile d_new_count := ( $slice d_new_cmd 142 128 ) 
    $volatile d_new_key := ( $slice d_new_cmd 127 0 ) 
    $if (d_get_new_key == 1 ) $then 
    $place[GotNewKey]
    $else 
    $place[NotGotNewKey]
    $endif
  }
}
$operator $module [enc_round]
$in ( round_in : $uint<128>   key_in : $uint<128>   l_round : $uint<1>  )
$out ( round_out : $uint<128>  )
$is
{
  $constant  mod_const : $uint<8>:= _h1b  
  $constant  sel : $uint<8>:= _b01111111  
  $volatile Sa := ( $slice round_in 127 96 ) 
  $volatile Sb := ( $slice round_in 95 64 ) 
  $volatile Sc := ( $slice round_in 63 32 ) 
  $volatile Sd := ( $slice round_in 31 0 ) 
  $volatile S00sr := ( $slice Sa 31 24 ) 
  $volatile S01sr := ( $slice Sa 23 16 ) 
  $volatile S02sr := ( $slice Sa 15 8 ) 
  $volatile S03sr := ( $slice Sa 7 0 ) 
  $volatile S04sr := ( $slice Sb 31 24 ) 
  $volatile S05sr := ( $slice Sb 23 16 ) 
  $volatile S06sr := ( $slice Sb 15 8 ) 
  $volatile S07sr := ( $slice Sb 7 0 ) 
  $volatile S08sr := ( $slice Sc 31 24 ) 
  $volatile S09sr := ( $slice Sc 23 16 ) 
  $volatile S10sr := ( $slice Sc 15 8 ) 
  $volatile S11sr := ( $slice Sc 7 0 ) 
  $volatile S12sr := ( $slice Sd 31 24 ) 
  $volatile S13sr := ( $slice Sd 23 16 ) 
  $volatile S14sr := ( $slice Sd 15 8 ) 
  $volatile S15sr := ( $slice Sd 7 0 ) 
  $volatile 	$call sbox_mux_impl (S00sr ) (S00 )  $buffering 10984768
  $volatile 	$call sbox_mux_impl (S05sr ) (S01 )  $buffering 10966240
  $volatile 	$call sbox_mux_impl (S10sr ) (S02 )  $buffering 10947712
  $volatile 	$call sbox_mux_impl (S15sr ) (S03 )  $buffering 10929056
  $volatile 	$call sbox_mux_impl (S04sr ) (S04 )  $buffering 10910656
  $volatile 	$call sbox_mux_impl (S09sr ) (S05 )  $buffering 10857200
  $volatile 	$call sbox_mux_impl (S14sr ) (S06 )  $buffering 10838672
  $volatile 	$call sbox_mux_impl (S03sr ) (S07 )  $buffering 10820144
  $volatile 	$call sbox_mux_impl (S08sr ) (S08 )  $buffering 10787008
  $volatile 	$call sbox_mux_impl (S13sr ) (S09 )  $buffering 10768480
  $volatile 	$call sbox_mux_impl (S02sr ) (S10 )  $buffering 10749952
  $volatile 	$call sbox_mux_impl (S07sr ) (S11 )  $buffering 10713664
  $volatile 	$call sbox_mux_impl (S12sr ) (S12 )  $buffering 10695136
  $volatile 	$call sbox_mux_impl (S01sr ) (S13 )  $buffering 10676608
  $volatile 	$call sbox_mux_impl (S06sr ) (S14 )  $buffering 10648816
  $volatile 	$call sbox_mux_impl (S11sr ) (S15 )  $buffering 10603552
  $volatile S00x2 := (S00 << 1 )
  $volatile S01x2 := (S01 << 1 )
  $volatile S02x2 := (S02 << 1 )
  $volatile S03x2 := (S03 << 1 )
  $volatile S04x2 := (S04 << 1 )
  $volatile S05x2 := (S05 << 1 )
  $volatile S06x2 := (S06 << 1 )
  $volatile S07x2 := (S07 << 1 )
  $volatile S08x2 := (S08 << 1 )
  $volatile S09x2 := (S09 << 1 )
  $volatile S10x2 := (S10 << 1 )
  $volatile S11x2 := (S11 << 1 )
  $volatile S12x2 := (S12 << 1 )
  $volatile S13x2 := (S13 << 1 )
  $volatile S14x2 := (S14 << 1 )
  $volatile S15x2 := (S15 << 1 )
  $volatile S00x2g := ( $mux (S00 [] 7 ) (S00x2 ^ mod_const)  S00x2 ) 
  $volatile S01x2g := ( $mux (S01 [] 7 ) (S01x2 ^ mod_const)  S01x2 ) 
  $volatile S02x2g := ( $mux (S02 [] 7 ) (S02x2 ^ mod_const)  S02x2 ) 
  $volatile S03x2g := ( $mux (S03 [] 7 ) (S03x2 ^ mod_const)  S03x2 ) 
  $volatile S04x2g := ( $mux (S04 [] 7 ) (S04x2 ^ mod_const)  S04x2 ) 
  $volatile S05x2g := ( $mux (S05 [] 7 ) (S05x2 ^ mod_const)  S05x2 ) 
  $volatile S06x2g := ( $mux (S06 [] 7 ) (S06x2 ^ mod_const)  S06x2 ) 
  $volatile S07x2g := ( $mux (S07 [] 7 ) (S07x2 ^ mod_const)  S07x2 ) 
  $volatile S08x2g := ( $mux (S08 [] 7 ) (S08x2 ^ mod_const)  S08x2 ) 
  $volatile S09x2g := ( $mux (S09 [] 7 ) (S09x2 ^ mod_const)  S09x2 ) 
  $volatile S10x2g := ( $mux (S10 [] 7 ) (S10x2 ^ mod_const)  S10x2 ) 
  $volatile S11x2g := ( $mux (S11 [] 7 ) (S11x2 ^ mod_const)  S11x2 ) 
  $volatile S12x2g := ( $mux (S12 [] 7 ) (S12x2 ^ mod_const)  S12x2 ) 
  $volatile S13x2g := ( $mux (S13 [] 7 ) (S13x2 ^ mod_const)  S13x2 ) 
  $volatile S14x2g := ( $mux (S14 [] 7 ) (S14x2 ^ mod_const)  S14x2 ) 
  $volatile S15x2g := ( $mux (S15 [] 7 ) (S15x2 ^ mod_const)  S15x2 ) 
  $volatile Wc0 := ((S00 ^ S01) ^ (S02 ^ S03))
  $volatile Wc1 := ((S04 ^ S05) ^ (S06 ^ S07))
  $volatile Wc2 := ((S08 ^ S09) ^ (S10 ^ S11))
  $volatile Wc3 := ((S12 ^ S13) ^ (S14 ^ S15))
  $volatile MX00 := ((S00x2g ^ S01x2g) ^ (Wc0 ^ S00))
  $volatile MX01 := ((S01x2g ^ S02x2g) ^ (Wc0 ^ S01))
  $volatile MX02 := ((S02x2g ^ S03x2g) ^ (Wc0 ^ S02))
  $volatile MX03 := ((S03x2g ^ S00x2g) ^ (Wc0 ^ S03))
  $volatile MX04 := ((S04x2g ^ S05x2g) ^ (Wc1 ^ S04))
  $volatile MX05 := ((S05x2g ^ S06x2g) ^ (Wc1 ^ S05))
  $volatile MX06 := ((S06x2g ^ S07x2g) ^ (Wc1 ^ S06))
  $volatile MX07 := ((S07x2g ^ S04x2g) ^ (Wc1 ^ S07))
  $volatile MX08 := ((S08x2g ^ S09x2g) ^ (Wc2 ^ S08))
  $volatile MX09 := ((S09x2g ^ S10x2g) ^ (Wc2 ^ S09))
  $volatile MX10 := ((S10x2g ^ S11x2g) ^ (Wc2 ^ S10))
  $volatile MX11 := ((S11x2g ^ S08x2g) ^ (Wc2 ^ S11))
  $volatile MX12 := ((S12x2g ^ S13x2g) ^ (Wc3 ^ S12))
  $volatile MX13 := ((S13x2g ^ S14x2g) ^ (Wc3 ^ S13))
  $volatile MX14 := ((S14x2g ^ S15x2g) ^ (Wc3 ^ S14))
  $volatile MX15 := ((S15x2g ^ S12x2g) ^ (Wc3 ^ S15))
  $volatile Yl0 := ((S00 && S01) && (S02 && S03))
  $volatile Yl1 := ((S04 && S05) && (S06 && S07))
  $volatile Yl2 := ((S08 && S09) && (S10 && S11))
  $volatile Yl3 := ((S12 && S13) && (S14 && S15))
  $volatile Ylout := ((Yl0 && Yl1) && (Yl2 && Yl3))
  $volatile Y0 := ((MX00 && MX01) && (MX02 && MX03))
  $volatile Y1 := ((MX04 && MX05) && (MX06 && MX07))
  $volatile Y2 := ((MX08 && MX09) && (MX10 && MX11))
  $volatile Y3 := ((MX12 && MX13) && (MX14 && MX15))
  $volatile Yout := ((Y0 && Y1) && (Y2 && Y3))
  $volatile Zout := ( $mux l_round Ylout  Yout ) 
  round_out := (Zout ^ key_in)
}
$module [e_block_daemon]
$in ()
$out ()
$is
{
  $constant  RConstant_1 : $uint<8>:= _h01  
  $constant  NOT_LAST : $uint<1>:= 0  
  $constant  LAST : $uint<1>:= 1  
  $constant  ZERO_COUNT : $uint<15>:= 0  
  $branchblock [E_MAIN]
  {
    e_block_done := 1 
    $merge $entry NotGotCmd 
    $endmerge
    e_init_cmd := e_cmd_pipe
    $volatile e_get_key := ( $slice e_init_cmd 143 143 ) 
    $volatile e_init_count := ( $slice e_init_cmd 142 128 ) 
    $volatile e_init_key := ( $slice e_init_cmd 127 0 ) 
    $if (e_get_key == 0 ) $then 
    $place[NotGotCmd]
    $endif
    $merge $entry GotNewKey 
    $phi K0 := 			  e_init_key $on $entry			  e_new_key $on GotNewKey // type of target is $uint<128>
    $phi countA := 			  e_init_count $on $entry			  e_new_count $on GotNewKey // type of target is $uint<15>
    $endmerge
    $call key_expand_single (K0 RConstant_1 ) (K1 RConstant_2 ) 
    $call key_expand_single (K1 RConstant_2 ) (K2 RConstant_3 ) 
    $call key_expand_single (K2 RConstant_3 ) (K3 RConstant_4 ) 
    $call key_expand_single (K3 RConstant_4 ) (K4 RConstant_5 ) 
    $call key_expand_single (K4 RConstant_5 ) (K5 RConstant_6 ) 
    $call key_expand_single (K5 RConstant_6 ) (K6 RConstant_7 ) 
    $call key_expand_single (K6 RConstant_7 ) (K7 RConstant_8 ) 
    $call key_expand_single (K7 RConstant_8 ) (K8 RConstant_9 ) 
    $call key_expand_single (K8 RConstant_9 ) (K9 RConstant_10 ) 
    $call key_expand_single (K9 RConstant_10 ) (K10 RConstant_11 ) 
    $merge $entry NotGotNewKey 
    $phi countB := 			  countA $on $entry			  e_new_count $on NotGotNewKey // type of target is $uint<15>
    $endmerge
    $dopipeline $depth 2 $buffering 1
    $merge $entry $loopback 
    $phi count_var := 			  ZERO_COUNT $on $entry			  n_count_var $on $loopback // type of target is $uint<15>
    $endmerge
    $volatile in128 := e_in_buf
    $volatile round_S0 := (in128 ^ K0)
    round_S0_13810_delayed_1 := round_S0
    K1_13811_delayed_1 := K1
    $call enc_round (round_S0_13810_delayed_1 K1_13811_delayed_1 NOT_LAST ) (round_S1 ) 
    K2_13816_delayed_2 := K2 $buffering 2
    $call enc_round (round_S1 K2_13816_delayed_2 NOT_LAST ) (round_S2 ) 
    K3_13821_delayed_3 := K3 $buffering 3
    $call enc_round (round_S2 K3_13821_delayed_3 NOT_LAST ) (round_S3 ) 
    K4_13826_delayed_4 := K4 $buffering 4
    $call enc_round (round_S3 K4_13826_delayed_4 NOT_LAST ) (round_S4 ) 
    K5_13831_delayed_5 := K5 $buffering 5
    $call enc_round (round_S4 K5_13831_delayed_5 NOT_LAST ) (round_S5 ) 
    K6_13836_delayed_6 := K6 $buffering 6
    $call enc_round (round_S5 K6_13836_delayed_6 NOT_LAST ) (round_S6 ) 
    K7_13841_delayed_7 := K7 $buffering 7
    $call enc_round (round_S6 K7_13841_delayed_7 NOT_LAST ) (round_S7 ) 
    K8_13846_delayed_8 := K8 $buffering 8
    $call enc_round (round_S7 K8_13846_delayed_8 NOT_LAST ) (round_S8 ) 
    K9_13851_delayed_9 := K9 $buffering 9
    $call enc_round (round_S8 K9_13851_delayed_9 NOT_LAST ) (round_S9 ) 
    K10_13856_delayed_10 := K10 $buffering 10
    $call enc_round (round_S9 K10_13856_delayed_10 LAST ) (round_S10 ) 
    e_out_buf := round_S10
    n_count_var := (count_var + 1 )
    $while (n_count_var < countB)
    e_block_done := 1 
    e_new_cmd := e_cmd_pipe
    $volatile e_get_new_key := ( $slice e_new_cmd 143 143 ) 
    $volatile e_new_count := ( $slice e_new_cmd 142 128 ) 
    $volatile e_new_key := ( $slice e_new_cmd 127 0 ) 
    $if (e_get_new_key == 1 ) $then 
    $place[GotNewKey]
    $else 
    $place[NotGotNewKey]
    $endif
  }
}
$module [global_storage_initializer_]
$in ()
$out ()
$is
{
  $null
}
$module [w_in_buff_daemon]
$in ()
$out ()
$is
{
  $branchblock [loop]
  {
    $dopipeline $depth 3 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $endmerge
    Ina := in_data
    Inb := in_data
    w_in_buf := (Ina && Inb)
    $while 1 
  }
}
$module [w_out_buff_daemon]
$in ()
$out ()
$is
{
  $branchblock [loop]
  {
    $dopipeline $depth 3 $buffering 2
    $fullrate 
    $merge $entry $loopback 
    $endmerge
    Z := w_out_buf
    $volatile Ya := ( $slice Z 127 64 ) 
    $volatile Yb := ( $slice Z 63 0 ) 
    out_data := Ya
    out_data := Yb
    $while 1 
  }
}
