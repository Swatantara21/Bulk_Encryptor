$pipe in_data  : $uint<64> $depth 2
$pipe out_data : $uint<64> $depth 2
$pipe in_buf : $uint<128> $depth 512
$pipe out_buf : $uint<128> $depth 512
$pipe e_cmd_pipe : $uint<144> $depth 2
$noblock $pipe e_block_done : $uint<1> $depth 2

$pipe cmd_in  : $uint<64> $depth 2
$pipe status_out  : $uint<64> $depth 2

$module [e_block_daemon] $in() $out () $is
{	
	
	$constant RConstant_1 : $uint<8> := _h01
	$constant NOT_LAST : $uint<1> := 0
	$constant LAST : $uint<1> := 1
	$constant ZERO_COUNT : $uint<15>:= 0
	
	$branchblock[E_MAIN]  {
		
		e_block_done := 1
		$merge $entry NotGotCmd $endmerge
		
	   	e_init_cmd := e_cmd_pipe
	   	$volatile $split(e_init_cmd 1 15 128) (e_get_key e_init_count e_init_key)
	   	
	   	$if(e_get_key == 0) $then $place [NotGotCmd] $endif
	   
	   	
	   	
	   	$merge $entry GotNewKey 
	   	   $phi K0 	:= e_init_key $on $entry	e_new_key $on GotNewKey
	   	   $phi countA 	:= e_init_count $on $entry	e_new_count $on GotNewKey
	   	$endmerge
	   	
	   	$call key_expand_single(K0 RConstant_1) (K1 RConstant_2)
	   	$call key_expand_single(K1 RConstant_2) (K2 RConstant_3)
	   	$call key_expand_single(K2 RConstant_3) (K3 RConstant_4)
	   	$call key_expand_single(K3 RConstant_4) (K4 RConstant_5)
	   	$call key_expand_single(K4 RConstant_5) (K5 RConstant_6)
	   	$call key_expand_single(K5 RConstant_6) (K6 RConstant_7)
	   	$call key_expand_single(K6 RConstant_7) (K7 RConstant_8)
	   	$call key_expand_single(K7 RConstant_8) (K8 RConstant_9)
	   	$call key_expand_single(K8 RConstant_9) (K9 RConstant_10)
	   	$call key_expand_single(K9 RConstant_10) (K10 RConstant_11)
	   	
		$merge $entry NotGotNewKey
	   		$phi countB 	:= countA $on $entry	e_new_count $on NotGotNewKey
	   	$endmerge
		
		
		$dopipeline $depth 2 $buffering 1
		$merge $entry $loopback
		////************** or implement a counter module
			$phi count_var 	:= ZERO_COUNT $on $entry	n_count_var $on $loopback
		$endmerge
	//Ina := in_data
	//Inb := in_data
			$volatile in128 := in_buf

			$volatile round_S0 := (in128 ^ K0)
			$call enc_round (round_S0 K1 NOT_LAST) (round_S1)
			$call enc_round (round_S1 K2 NOT_LAST) (round_S2)
			$call enc_round (round_S2 K3 NOT_LAST) (round_S3)
			$call enc_round (round_S3 K4 NOT_LAST) (round_S4)
			$call enc_round (round_S4 K5 NOT_LAST) (round_S5)
			$call enc_round (round_S5 K6 NOT_LAST) (round_S6)
			$call enc_round (round_S6 K7 NOT_LAST) (round_S7)
			$call enc_round (round_S7 K8 NOT_LAST) (round_S8)
			$call enc_round (round_S8 K9 NOT_LAST) (round_S9)
			$call enc_round (round_S9 K10 LAST) (round_S10)
		
			out_buf := round_S10
			
	
			n_count_var := (count_var + 1)
		$while (n_count_var < countB)	
	
		e_block_done := 1
		e_new_cmd := e_cmd_pipe
		$volatile $split(e_new_cmd 1 15 128) (e_get_new_key e_new_count e_new_key)
	
		$if (e_get_new_key == 1) $then $place [GotNewKey]
		$else $place [NotGotNewKey]
		$endif
	}
}

$module [e_in_buff] $in() $out () $is
{	
	
	Ina := in_data
	Inb := in_data

	in_buf := ($concat Ina Inb)
	
}
$module [e_out_buff] $in() $out () $is
{	
	 		
	Z := out_buf
	$volatile $split (Z 64 64)  (Ya Yb)
	out_data := Ya
	out_data := Yb
		
}
