$pipe in_data  : $uint<32> $depth 2
$pipe key_in  : $uint<32> $depth 2
$pipe out_data : $uint<32> $depth 2
 
$module [aes_daemon] $in() $out () $is
{	
	
	$pipe key_store: $uint<128> $depth 10
	$constant RConstant : $uint<8> := _h01
	$constant mod_const : $uint<8> := _h1b
	
	$pipe key_out : $uint<128> $depth 2
		
			Ka := key_in
			Kb := key_in
			Kc := key_in
			Kd := key_in
	
	$volatile K0 := ($concat Kd Kc Kb Ka)		
	
	$branchblock[KEY_GENERATE]{	
			
		$merge $entry loopback
			$phi COUNT := ($bitcast ($uint<4>) 1) $on $entry
					 NCOUNT $on loopback
			$phi K_round := K0 $on $entry
					nkey  $on loopback
			$phi Round_C := RConstant $on $entry
					 nRound_C $on loopback	
		$endmerge
		
		$volatile $call key_expnd (K_round Round_C) (nkey)
		
		
		////////next round constant
		////////////////////////
		//mul by 2
		$volatile Rx2 := (Round_C << 1)
		
		// mul by 2 in GF
		$volatile nRound_C := ($mux (Round_C [] 7) (Rx2 ^ mod_const) Rx2)
		///////////////////////////
		
		key_store :=  nkey /////use excmux or case instead.
		
		$volatile NCOUNT := (COUNT + 1)
		$if (COUNT < 10) $then
			$place [loopback]
		$endif	
		
				
	}
	K1 := key_store
	K2 := key_store
	K3 := key_store
	K4 := key_store
	K5 := key_store
	K6 := key_store
	K7 := key_store
	K8 := key_store
	K9 := key_store
	K10 := key_store
	
			Ina := in_data
			Inb := in_data
			Inc := in_data
			Ind := in_data
	$volatile in128 := ($concat Ind Inc Inb Ina)
	
	$volatile round_S0 := (in128 ^ K0)
	$call enc_round (round_S0 K1) (round_S1)
	$call enc_round (round_S1 K2) (round_S2)
	$call enc_round (round_S2 K3) (round_S3)
	$call enc_round (round_S3 K4) (round_S4)
	$call enc_round (round_S4 K5) (round_S5)
	$call enc_round (round_S5 K6) (round_S6)
	$call enc_round (round_S6 K7) (round_S7)
	$call enc_round (round_S7 K8) (round_S8)
	$call enc_round (round_S8 K9) (round_S9)
	$call enc_round_10 (round_S9 K10) (round_S10)
	
	$volatile $split (round_S10 32 32 32 32)
			(Yd Yc Yb Ya)
			
	out_data := Ya
	out_data := Yb
	out_data := Yc
	out_data := Yd
}

